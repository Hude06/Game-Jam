export const ButtonBackgroundColor_active = "#a3e3ff";
export const ButtonBackgroundColor_selected = "#36baec";
export const ButtonBackgroundColor = "#e3e3e0";
export const ButtonBorderColor = "#949492";
export const StandardSelectionColor = "#a3e3ff";
export const StandardTextColor = "#444";
export const StandardTextStyle = "16px sans-serif";
export const StandardTextHeight = 20;
export const StandardVerticalMargin = 10;
export const StandardLeftPadding = 5;
export const StandardPanelBackgroundColor = "#f0f0f0";
export interface Palette {
    get_color_palette(): string[];
}
export class Sprite {
    id: string;
    name: string;
    w: number;
    h: number;
    data: number[];
    _img: HTMLCanvasElement;
    constructor(id: string, name: string, w: number, h: number, palette: Palette);
    forEachPixel(cb: (val: any, i: number, j: number) => void): void;
    set_pixel(x: number, y: number, color: any): void;
    sync(): void;
    get_pixel(x: number, y: number): any;
    toJsonObj(): object;
}
export class Sheet {
    sprites: Sprite[];
    name: string;
    constructor(id: string, name: string);
    add(sprite: Sprite): void;
    toJsonObj(): {
        clazz: string;
        id: string;
        name: string;
        sprites: object[];
    };
}
export class Tilemap {
    id: string;
    name: string;
    w: number;
    h: number;
    data: number[];
    constructor(id: any, name: any, w: any, h: any);
    forEachPixel(cb: (val: any, i: number, j: number) => void): void;
    expand_width(number: number): void;
    set_pixel(x: number, y: number, color: any): void;
    get_pixel(x: number, y: number): any;
    toJsonObj(): {
        clazz: string;
        id: string;
        name: string;
        w: number;
        h: number;
        data: number[];
    };
}
type GlyphMeta = {
    codepoint: number;
    left: number;
    right: number;
    baseline: number;
};
export class SpriteGlyph extends Sprite {
    meta: GlyphMeta;
    constructor(id: any, name: any, w: any, h: any, palette: any);
    sync(): void;
    toJsonObj(): object;
}
export class SpriteFont {
    glyphs: SpriteGlyph[];
    id: string;
    name: string;
    constructor(id: any, name: any);
    toJsonObj(): {
        clazz: string;
        id: string;
        name: string;
        glyphs: object[];
    };
    add(spriteGlyph: SpriteGlyph): void;
}
export interface AssetsDoc extends Palette {
    find_sheet(name: String): Sheet;
    find_sprite(sheet_name: String, sprite_name: String): Sprite;
}
export function load_assets_from_json(data: any): AssetsDoc;
export function log(...args: any[]): void;
export function rect_from_pos_size(point: Point, size: Size): Rect;
export interface SurfaceContext {
    size(): Size;
    root(): View;
    set_root(root: View): any;
    repaint(): any;
    clear(): any;
    fill(rect: Rect, color: string): any;
    stroke(rect: Rect, color: string): any;
    fillBackgroundSize(size: Size, color: string): any;
    strokeBackgroundSize(size: Size, color: string): any;
    measureText(caption: string, font_name?: string): Size;
    fillStandardText(caption: string, x: number, y: number, font_name?: string, scale?: number): any;
    draw_glyph(codepoint: number, x: number, y: number, font_name: string, fill: string, scale?: number): any;
    set_sprite_scale(scale: number): any;
    set_smooth_sprites(sprite_smoothing: boolean): any;
    draw_sprite(pt: Point, sprite: Sprite): any;
    keyboard_focus(): View;
    set_keyboard_focus(view: View): any;
    is_keyboard_focus(view: View): any;
    release_keyboard_focus(view: View): any;
    view_to_local(pt: Point, view: View): Point;
    find_by_name(name: string): View | null;
}
export class CanvasSurface implements SurfaceContext {
    size(): Size;
    ctx: CanvasRenderingContext2D;
    debug: boolean;
    protected _keyboard_focus: View;
    constructor(w: number, h: number, scale?: number);
    addToPage(): void;
    set_root(root: View): void;
    root(): View;
    repaint(): void;
    clear(): void;
    fill(rect: Rect, color: string): void;
    stroke(rect: Rect, color: string): void;
    fillBackgroundSize(size: Size, color: string): void;
    strokeBackgroundSize(size: Size, color: string): void;
    fillRect(x: number, y: number, w: number, h: number, color: string): void;
    propagateKeyboardEvent(evt: KeyboardEvent, path: View[]): void;
    keyboard_focus(): View;
    set_keyboard_focus(view: View): void;
    is_keyboard_focus(view: View): boolean;
    release_keyboard_focus(view: View): void;
    on_input(cb: Callback): void;
    measureText(caption: string, font_name?: string): Size;
    fillStandardText(caption: string, x: number, y: number, font_name?: string, scale?: number): void;
    draw_glyph(codepoint: number, x: number, y: number, font_name: string, fill: string, scale?: number): void;
    load_jsonfont(basefont_data: any, name: string, ref_name: string): void;
    set_sprite_scale(scale: number): void;
    set_smooth_sprites(sprite_smoothing: boolean): void;
    draw_sprite(pt: Point, sprite: Sprite): void;
    draw_tilemap(tilemap: Tilemap, sheet: Sheet, x: number, y: number, scale: number): void;
    find_by_name(name: string): View | null;
    local_to_view(pt: Point, view: View): Point;
    view_to_local(pt: Point, view: View): Point;
    start(): void;
}
export class LayerView extends BaseParentView {
    _type: string;
    constructor(name?: string);
    draw(g: SurfaceContext): void;
    layout(g: SurfaceContext, available: Size): Size;
    set_visible(visible: boolean): void;
}
export type VAlign = "top" | "center" | "bottom" | "stretch";
export class HBox extends BaseParentView {
    pad: number;
    constructor();
    set_fill(fill: string): void;
    set_valign(valign: VAlign): void;
    layout(g: SurfaceContext, real_available: Size): Size;
    draw(g: SurfaceContext): void;
}
export type HAlign = "left" | "center" | "right" | "stretch";
export class VBox extends BaseParentView {
    pad: number;
    halign: HAlign;
    constructor();
    fill(): string;
    set_fill(fill: string): void;
    layout(g: SurfaceContext, real_available: Size): Size;
    draw(g: SurfaceContext): void;
    clear_children(): void;
}
export class GrowPanel extends BaseParentView {
    constructor();
    layout(g: SurfaceContext, available: Size): Size;
    draw(g: SurfaceContext): void;
    set_fill(fill: string): void;
    with_fill(fill: string): this;
}
export class ScrollView extends BaseParentView {
    constructor();
    draw(g: SurfaceContext): void;
    set_pref_width(num: number): void;
    layout(g: SurfaceContext, available: Size): Size;
    set_content(view: View): void;
}
export class PopupContainer extends BaseParentView {
    constructor();
    draw(g: SurfaceContext): void;
    layout(g: SurfaceContext, available: Size): Size;
    open_at(position: Point): void;
    hide(): void;
}
export class PopupLayer extends LayerView {
    constructor();
    draw(g: SurfaceContext): void;
    input(event: CoolEvent): void;
    can_receive_mouse(): boolean;
}
export class DialogLayer extends LayerView {
    constructor();
    draw(g: SurfaceContext): void;
}
export class DialogContainer extends BaseParentView {
    constructor();
    draw(g: SurfaceContext): void;
    layout(g: SurfaceContext, available: Size): Size;
}
export class KeystrokeCaptureView extends LayerView {
    constructor(main_view: View);
    input(event: CoolEvent): void;
}
export class Label extends BaseView {
    protected _caption: string;
    constructor(caption?: string);
    caption(): string;
    set_caption(caption: string): void;
    draw(g: SurfaceContext): void;
    layout(g: SurfaceContext, available: Size): Size;
}
export class CustomLabel extends Label {
    constructor(text: string, cb: Callback);
    draw(ctx: SurfaceContext): void;
}
export class ActionButton extends BaseView {
    protected caption: string;
    constructor(props?: any);
    set_caption(caption: string): void;
    draw(g: SurfaceContext): void;
    input(event: CoolEvent): void;
    layout(g: SurfaceContext, available: Size): Size;
}
export abstract class BaseSelectButton extends BaseView {
    _caption: string;
    _selected: boolean;
    _active: boolean;
    selected_icon: number;
    icon: number;
    constructor();
    selected(): boolean;
    set_selected(sel: boolean): void;
    caption(): string;
    set_caption(caption: string): void;
    draw(g: SurfaceContext): void;
    input(event: CoolEvent): void;
    layout(g: SurfaceContext, available: Size): Size;
}
export class ToggleButton extends BaseSelectButton {
    constructor(caption?: string);
    draw(ctx: SurfaceContext): void;
}
export class CheckButton extends BaseSelectButton {
    constructor();
}
export class RadioButton extends BaseSelectButton {
    constructor();
}
export class IconButton extends BaseView {
    constructor();
    draw(g: SurfaceContext): void;
    input(event: CoolEvent): void;
    layout(g: SurfaceContext, available: Size): Size;
    icon(): number;
    set_icon(icon: number): void;
}
export class SelectList extends BaseView {
    constructor(data: any[], renderer: any);
    draw(g: SurfaceContext): void;
    input(event: CoolEvent): void;
    set_data(data: any[]): void;
    layout(g: SurfaceContext, available: Size): Size;
}
export class Header extends BaseView {
    constructor(caption?: string);
    caption(): string;
    set_caption(caption: string): void;
    draw(g: SurfaceContext): void;
    layout(g: SurfaceContext, available: Size): Size;
}
export class HSpacer extends BaseView {
    constructor();
    layout(g: SurfaceContext, available: Size): Size;
    draw(g: SurfaceContext): void;
}
export class FontIcon extends BaseView {
    constructor(codepoint: number);
    draw(g: SurfaceContext): void;
    layout(g: SurfaceContext, available: Size): Size;
}
export class DropdownButton extends ActionButton {
    actions: Action[];
    constructor();
    set_actions(actions: Action[]): void;
}
export class TextLine extends BaseView {
    text: string;
    constructor();
    draw(g: SurfaceContext): void;
    input(event: CoolEvent): void;
    layout(g: SurfaceContext, available: Size): Size;
    set_text(name: string): void;
    set_pref_width(w: number): void;
}
export class NumberTextLine extends HBox {
    constructor();
    draw(g: any): void;
    set_value(value: number): void;
    value(): number;
}
type EventCategory = string;
type EventType = string;
type EventDirection = "down" | "up";
export class CoolEvent {
    type: EventType;
    category: EventCategory;
    timestamp: number;
    details: any;
    ctx: SurfaceContext;
    target: any;
    direction: EventDirection;
    stopped: any;
    constructor(ctx: SurfaceContext, category: EventCategory, type: EventType);
}
export type Modifiers = {
    shift: boolean;
    alt: boolean;
    ctrl: boolean;
    meta: boolean;
};
export const POINTER_CATEGORY: EventCategory;
export const POINTER_MOVE: EventType;
export const POINTER_DRAG: EventType;
export const POINTER_DOWN: EventType;
export const POINTER_UP: EventType;
export const PRIMARY_BUTTON: number;
export const SECONDARY_BUTTON: number;
export function gen_id(prefix: string): string;
export type Callback = (any: any) => any;
export class SuperArray {
    constructor();
    clear(): void;
    push_end(value: any): void;
    length(): number;
    pop_start(): any;
    forEach(cb: Callback): void;
}
export class Point {
    x: number;
    y: number;
    constructor(x: any, y: any);
    translate(x: number, y: number): Point;
    divide_floor(scale: number): Point;
    add(pt: Point): Point;
    set(x: number, y: number): void;
    copy_from(pt: Point): void;
    clone(): Point;
    subtract(trans: Point): Point;
    magnitude(): number;
    divide(val: number): Point;
    scale(val: number): Point;
    unit(): Point;
    toString(): String;
}
export class Rect {
    x: number;
    y: number;
    w: number;
    h: number;
    constructor(x: any, y: any, w: any, h: any);
    clone(): Rect;
    contains(pt: Point): boolean;
    bottom(): number;
    right(): number;
    shrink(v: number): Rect;
    position(): Point;
    size(): Size;
    center(): Point;
    add_position(pt: Point): void;
    intersects(rect: Rect): boolean;
    contains_rect(rect: Rect): boolean;
}
export class Size {
    w: number;
    h: number;
    constructor(w: any, h: any);
    shrink(pad: number): Size;
    grow(pad: number): Size;
    subtract(delta: Point): Size;
    add(delta: Point): Size;
    contains(cursor: Point): boolean;
    toString(): String;
    equals(s: Size): boolean;
    clone(): Size;
}
export class PointerEvent extends CoolEvent {
    position: Point;
    delta: Point;
    button: number;
    modifiers: Modifiers;
    constructor(ctx: SurfaceContext, type: EventType, position: Point, delta: Point);
}
export const KEYBOARD_CATEGORY: EventCategory;
export const KEYBOARD_DOWN: EventType;
export const KEYBOARD_UP: EventType;
export class KeyboardEvent extends CoolEvent {
    key: string;
    code: string;
    modifiers: Modifiers;
    constructor(surface: SurfaceContext, type: EventType);
}
export const SCROLL_CATEGORY: EventCategory;
export const SCROLL_EVENT: EventType;
export class ScrollEvent extends CoolEvent {
    delta: Point;
    position: Point;
    modifiers: Modifiers;
    constructor(surface: SurfaceContext, type: EventType, position: Point, delta: Point);
}
export const FOCUS_CATEGORY: EventCategory;
export const FOCUS_GAINED: EventType;
export const FOCUS_LOST: EventType;
export class FocusEvent extends CoolEvent {
    constructor(surface: SurfaceContext, FOCUS_GAINED: EventType);
}
export const COMMAND_CATEGORY: EventCategory;
export const COMMAND_ACTION: EventType;
export class CommandEvent extends CoolEvent {
    constructor(ctx: SurfaceContext, type: EventType, target: any);
}
export const COMMAND_CHANGE: EventType;
export type Action = {
    caption: string;
};
export const CLIPBOARD_CATEGORY: EventCategory;
export const CLIPBOARD_COPY: EventType;
export const CLIPBOARD_CUT: EventType;
export const CLIPBOARD_PASTE: EventType;
export class ClipboardEvent extends CoolEvent {
    content: any;
    mimetype: string;
}
export interface View {
    hflex(): boolean;
    vflex(): boolean;
    size(): Size;
    set_size(size: Size): any;
    position(): Point;
    set_position(point: Point): any;
    layout(g: SurfaceContext, available: Size): Size;
    draw(g: SurfaceContext): void;
    visible(): boolean;
    input(event: CoolEvent): void;
    on(type: string, cb: Callback): void;
    off(type: string, cb: Callback): void;
    name(): string;
}
export interface ParentView {
    is_parent_view(): boolean;
    get_children(): View[];
    find_child(id: string): View | null;
    clip_children(): boolean;
    can_receive_mouse(): boolean;
}
export abstract class BaseParentView implements View, ParentView {
    protected _hflex: boolean;
    protected _vflex: boolean;
    id: string;
    protected _visible: boolean;
    protected _children: View[];
    protected _name: string;
    constructor(id: string);
    hflex(): boolean;
    set_hflex(hflex: any): void;
    vflex(): boolean;
    set_vflex(vflex: any): void;
    protected log(...args: any[]): void;
    size(): Size;
    set_size(size: Size): void;
    position(): Point;
    set_position(point: Point): void;
    clip_children(): boolean;
    draw(g: SurfaceContext): void;
    get_children(): View[];
    find_child(id: string): View | null;
    add(view: View): void;
    remove(view: View): void;
    input(event: CoolEvent): void;
    is_parent_view(): boolean;
    name(): string;
    set_name(name: string): void;
    on(type: string, cb: Callback): void;
    off(type: string, cb: Callback): void;
    fire(type: string, payload: any): void;
    visible(): boolean;
    abstract layout(g: SurfaceContext, available: Size): Size;
    can_receive_mouse(): boolean;
}
export abstract class BaseView implements View {
    protected _hflex: boolean;
    protected _vflex: boolean;
    protected _visible: boolean;
    protected _name: string;
    protected id: string;
    constructor(id: string);
    hflex(): boolean;
    vflex(): boolean;
    protected log(...args: any[]): void;
    on(type: string, cb: Callback): void;
    off(type: string, cb: Callback): void;
    fire(type: string, payload: any): void;
    size(): Size;
    set_size(size: Size): void;
    position(): Point;
    set_position(point: Point): void;
    input(event: CoolEvent): void;
    name(): string;
    set_name(name: string): void;
    visible(): boolean;
    set_visible(visible: boolean): void;
    abstract layout(g: SurfaceContext, available: Size): Size;
    abstract draw(g: SurfaceContext): void;
}
export function with_props(comp: View, json: any): View;
export function with_action(view: ActionButton, cb: Callback): View;
export function with_change(view: BaseSelectButton, cb: Callback): View;
export function randi(min: number, max: number): number;
export class DebugLensGlass extends BaseView {
    constructor(p: DebugLens, size: Size);
    layout(g: CanvasSurface, available: Size): Size;
    draw(g: CanvasSurface): void;
    draw_names(): boolean;
    set_draw_names(selected: boolean): void;
    set_draw_sizes(selected: boolean): void;
    set_draw_bounds(selected: boolean): void;
    set_draw_flex(selected: boolean): void;
    set_draw_align(selected: boolean): void;
    input(event: CoolEvent): void;
}
export class ResizeHandle extends BaseView {
    constructor(lens: DebugLens);
    input(event: CoolEvent): void;
    draw(g: CanvasSurface): void;
    layout(g: CanvasSurface, available: Size): Size;
}
export class DebugLens extends BaseParentView {
    _selected: View | null;
    constructor();
    input(event: CoolEvent): void;
    can_receive_mouse(): boolean;
    draw(g: CanvasSurface): void;
    layout(g: CanvasSurface, available: Size): Size;
    set_visible(b: boolean): void;
    set_selected(view: View | null): void;
}
export class DebugLayer extends LayerView {
    constructor();
    layout(g: CanvasSurface, available: Size): Size;
}
export class TableView extends BaseParentView {
    data: any[];
    columns_keys: string[];
    columns_widths: number[];
    constructor(songs: any[], columns_keys: string[], columns_widths: number[]);
    draw(g: CanvasSurface): void;
    layout(g: CanvasSurface, available: Size): Size;
}

//# sourceMappingURL=types.d.ts.map
