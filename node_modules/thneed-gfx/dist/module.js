function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $8a29e9b0d3dc349c$exports = {};

$parcel$export($8a29e9b0d3dc349c$exports, "CoolEvent", () => $8a29e9b0d3dc349c$export$aa8e9462579016b1);
$parcel$export($8a29e9b0d3dc349c$exports, "POINTER_CATEGORY", () => $8a29e9b0d3dc349c$export$9d2b52010bf6ce34);
$parcel$export($8a29e9b0d3dc349c$exports, "POINTER_MOVE", () => $8a29e9b0d3dc349c$export$5c736a62aeec4dde);
$parcel$export($8a29e9b0d3dc349c$exports, "POINTER_DRAG", () => $8a29e9b0d3dc349c$export$bf9b45a2f73f134);
$parcel$export($8a29e9b0d3dc349c$exports, "POINTER_DOWN", () => $8a29e9b0d3dc349c$export$1b45e8fa340ec4b9);
$parcel$export($8a29e9b0d3dc349c$exports, "POINTER_UP", () => $8a29e9b0d3dc349c$export$325fffb5a0fb0686);
$parcel$export($8a29e9b0d3dc349c$exports, "PRIMARY_BUTTON", () => $8a29e9b0d3dc349c$export$6f2dffa1ce451720);
$parcel$export($8a29e9b0d3dc349c$exports, "SECONDARY_BUTTON", () => $8a29e9b0d3dc349c$export$3ee72973dad68c21);
$parcel$export($8a29e9b0d3dc349c$exports, "gen_id", () => $8a29e9b0d3dc349c$export$40fec46f639d6a4d);
$parcel$export($8a29e9b0d3dc349c$exports, "SuperArray", () => $8a29e9b0d3dc349c$export$2be20915eb18ceef);
$parcel$export($8a29e9b0d3dc349c$exports, "Point", () => $8a29e9b0d3dc349c$export$baf26146a414f24a);
$parcel$export($8a29e9b0d3dc349c$exports, "Rect", () => $8a29e9b0d3dc349c$export$c79fc6492f3af13d);
$parcel$export($8a29e9b0d3dc349c$exports, "Size", () => $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec);
$parcel$export($8a29e9b0d3dc349c$exports, "PointerEvent", () => $8a29e9b0d3dc349c$export$94806efd9890932f);
$parcel$export($8a29e9b0d3dc349c$exports, "KEYBOARD_CATEGORY", () => $8a29e9b0d3dc349c$export$9ea12e6597684af);
$parcel$export($8a29e9b0d3dc349c$exports, "KEYBOARD_DOWN", () => $8a29e9b0d3dc349c$export$2f782da1dcec9699);
$parcel$export($8a29e9b0d3dc349c$exports, "KEYBOARD_UP", () => $8a29e9b0d3dc349c$export$71f4199cf5d644e1);
$parcel$export($8a29e9b0d3dc349c$exports, "KeyboardEvent", () => $8a29e9b0d3dc349c$export$a5c19b564dc41c2c);
$parcel$export($8a29e9b0d3dc349c$exports, "SCROLL_CATEGORY", () => $8a29e9b0d3dc349c$export$5acce15900d111af);
$parcel$export($8a29e9b0d3dc349c$exports, "SCROLL_EVENT", () => $8a29e9b0d3dc349c$export$ff567485663629e4);
$parcel$export($8a29e9b0d3dc349c$exports, "ScrollEvent", () => $8a29e9b0d3dc349c$export$6b6e41529b479d4c);
$parcel$export($8a29e9b0d3dc349c$exports, "FOCUS_CATEGORY", () => $8a29e9b0d3dc349c$export$a7f3c29903aaf76d);
$parcel$export($8a29e9b0d3dc349c$exports, "FOCUS_GAINED", () => $8a29e9b0d3dc349c$export$16f7cbdecbe19b78);
$parcel$export($8a29e9b0d3dc349c$exports, "FOCUS_LOST", () => $8a29e9b0d3dc349c$export$f82d7d72b9e09307);
$parcel$export($8a29e9b0d3dc349c$exports, "FocusEvent", () => $8a29e9b0d3dc349c$export$ef2db9a302825184);
$parcel$export($8a29e9b0d3dc349c$exports, "COMMAND_CATEGORY", () => $8a29e9b0d3dc349c$export$1b61a664d824d91b);
$parcel$export($8a29e9b0d3dc349c$exports, "COMMAND_ACTION", () => $8a29e9b0d3dc349c$export$d7d7f0f0e8a54cf8);
$parcel$export($8a29e9b0d3dc349c$exports, "CommandEvent", () => $8a29e9b0d3dc349c$export$4321e05f6706c18d);
$parcel$export($8a29e9b0d3dc349c$exports, "COMMAND_CHANGE", () => $8a29e9b0d3dc349c$export$9e79ac99d4b68a26);
$parcel$export($8a29e9b0d3dc349c$exports, "CLIPBOARD_CATEGORY", () => $8a29e9b0d3dc349c$export$57832389c821635d);
$parcel$export($8a29e9b0d3dc349c$exports, "CLIPBOARD_COPY", () => $8a29e9b0d3dc349c$export$af734cf1b8165bed);
$parcel$export($8a29e9b0d3dc349c$exports, "CLIPBOARD_CUT", () => $8a29e9b0d3dc349c$export$a43cee0a56e16595);
$parcel$export($8a29e9b0d3dc349c$exports, "CLIPBOARD_PASTE", () => $8a29e9b0d3dc349c$export$fdaf284d88231086);
$parcel$export($8a29e9b0d3dc349c$exports, "ClipboardEvent", () => $8a29e9b0d3dc349c$export$f7f37dd3b8ffe91f);
$parcel$export($8a29e9b0d3dc349c$exports, "BaseParentView", () => $8a29e9b0d3dc349c$export$13bdd94145ae928f);
$parcel$export($8a29e9b0d3dc349c$exports, "BaseView", () => $8a29e9b0d3dc349c$export$920f40dd82baec9f);
$parcel$export($8a29e9b0d3dc349c$exports, "with_props", () => $8a29e9b0d3dc349c$export$9fdee197c47e806f);
$parcel$export($8a29e9b0d3dc349c$exports, "with_action", () => $8a29e9b0d3dc349c$export$d4afaa3ba0ec3b47);
$parcel$export($8a29e9b0d3dc349c$exports, "with_change", () => $8a29e9b0d3dc349c$export$48697f005c434be7);
class $8a29e9b0d3dc349c$export$aa8e9462579016b1 {
    constructor(ctx, category, type){
        this.ctx = ctx;
        this.category = category;
        this.type = type;
    }
}
const $8a29e9b0d3dc349c$export$9d2b52010bf6ce34 = "POINTER_CATEGORY";
const $8a29e9b0d3dc349c$export$5c736a62aeec4dde = "POINTER_MOVE";
const $8a29e9b0d3dc349c$export$bf9b45a2f73f134 = "POINTER_DRAG";
const $8a29e9b0d3dc349c$export$1b45e8fa340ec4b9 = "POINTER_DOWN";
const $8a29e9b0d3dc349c$export$325fffb5a0fb0686 = "POINTER_UP";
const $8a29e9b0d3dc349c$export$6f2dffa1ce451720 = 0;
const $8a29e9b0d3dc349c$export$3ee72973dad68c21 = 2;
function $8a29e9b0d3dc349c$export$40fec46f639d6a4d(prefix) {
    return `${prefix}_${Math.floor(Math.random() * 100000)}`;
}
class $8a29e9b0d3dc349c$export$2be20915eb18ceef {
    constructor(){
        this.data = [];
    }
    clear() {
        this.data = [];
    }
    push_end(value) {
        this.data.push(value);
    }
    length() {
        return this.data.length;
    }
    pop_start() {
        return this.data.shift();
    }
    forEach(cb) {
        // @ts-ignore
        this.data.forEach((v, i)=>cb(v, i));
    }
}
class $8a29e9b0d3dc349c$export$baf26146a414f24a {
    constructor(x, y){
        this.x = x;
        this.y = y;
    }
    translate(x, y) {
        return new $8a29e9b0d3dc349c$export$baf26146a414f24a(this.x - x, this.y - y);
    }
    divide_floor(scale) {
        return new $8a29e9b0d3dc349c$export$baf26146a414f24a(Math.floor(this.x / scale), Math.floor(this.y / scale));
    }
    add(pt) {
        return new $8a29e9b0d3dc349c$export$baf26146a414f24a(this.x + pt.x, this.y + pt.y);
    }
    set(x, y) {
        this.x = x;
        this.y = y;
    }
    copy_from(pt) {
        this.x = pt.x;
        this.y = pt.y;
    }
    clone() {
        return new $8a29e9b0d3dc349c$export$baf26146a414f24a(this.x, this.y);
    }
    subtract(trans) {
        return new $8a29e9b0d3dc349c$export$baf26146a414f24a(this.x - trans.x, this.y - trans.y);
    }
    magnitude() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    }
    divide(val) {
        return new $8a29e9b0d3dc349c$export$baf26146a414f24a(this.x / val, this.y / val);
    }
    scale(val) {
        return new $8a29e9b0d3dc349c$export$baf26146a414f24a(this.x * val, this.y * val);
    }
    unit() {
        return this.divide(this.magnitude());
    }
    toString() {
        return `Point(${this.x},${this.y})`;
    }
}
class $8a29e9b0d3dc349c$export$c79fc6492f3af13d {
    constructor(x, y, w, h){
        this.x = x;
        this.y = y;
        this.w = w;
        this.h = h;
    }
    clone() {
        return new $8a29e9b0d3dc349c$export$c79fc6492f3af13d(this.x, this.y, this.w, this.h);
    }
    contains(pt) {
        if (pt.x < this.x) return false;
        if (pt.y < this.y) return false;
        if (pt.x >= this.x + this.w) return false;
        if (pt.y >= this.y + this.h) return false;
        return true;
    }
    bottom() {
        return this.y + this.h;
    }
    right() {
        return this.x + this.w;
    }
    shrink(v) {
        return new $8a29e9b0d3dc349c$export$c79fc6492f3af13d(this.x + v, this.y + v, this.w - v - v, this.h - v - v);
    }
    position() {
        return new $8a29e9b0d3dc349c$export$baf26146a414f24a(this.x, this.y);
    }
    size() {
        return new $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec(this.w, this.h);
    }
    center() {
        return new $8a29e9b0d3dc349c$export$baf26146a414f24a(this.x + this.w / 2, this.y + this.h / 2);
    }
    add_position(pt) {
        this.x += pt.x;
        this.y += pt.y;
    }
    intersects(rect) {
        if (this.contains(new $8a29e9b0d3dc349c$export$baf26146a414f24a(rect.x, rect.y))) return true;
        if (this.contains(new $8a29e9b0d3dc349c$export$baf26146a414f24a(rect.x, rect.y + rect.h))) return true;
        if (this.contains(new $8a29e9b0d3dc349c$export$baf26146a414f24a(rect.x + rect.w, rect.y))) return true;
        if (this.contains(new $8a29e9b0d3dc349c$export$baf26146a414f24a(rect.x + rect.w, rect.y + rect.h))) return true;
        return false;
    }
    contains_rect(rect) {
        if (!this.contains(new $8a29e9b0d3dc349c$export$baf26146a414f24a(rect.x, rect.y))) return false;
        if (!this.contains(new $8a29e9b0d3dc349c$export$baf26146a414f24a(rect.x, rect.y + rect.h))) return false;
        if (!this.contains(new $8a29e9b0d3dc349c$export$baf26146a414f24a(rect.x + rect.w, rect.y))) return false;
        if (!this.contains(new $8a29e9b0d3dc349c$export$baf26146a414f24a(rect.x + rect.w, rect.y + rect.h))) return false;
        return true;
    }
}
class $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec {
    constructor(w, h){
        this.w = w;
        this.h = h;
    }
    shrink(pad) {
        return new $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec(this.w - pad * 2, this.h - pad * 2);
    }
    grow(pad) {
        return new $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec(this.w + pad * 2, this.h + pad * 2);
    }
    subtract(delta) {
        return new $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec(this.w - delta.x, this.h - delta.y);
    }
    add(delta) {
        return new $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec(this.w + delta.x, this.h + delta.y);
    }
    contains(cursor) {
        if (cursor.x < 0) return false;
        if (cursor.y < 0) return false;
        if (cursor.x > this.w) return false;
        if (cursor.y > this.h) return false;
        return true;
    }
    toString() {
        return `${this.w}x${this.h}`;
    }
    equals(s) {
        return this.w === s.w && this.h === s.h;
    }
    clone() {
        return new $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec(this.w, this.h);
    }
}
class $8a29e9b0d3dc349c$export$94806efd9890932f extends $8a29e9b0d3dc349c$export$aa8e9462579016b1 {
    constructor(ctx, type, position, delta){
        super(ctx, $8a29e9b0d3dc349c$export$9d2b52010bf6ce34, type);
        this.position = position;
        this.delta = delta;
        this.direction = "down";
    }
}
const $8a29e9b0d3dc349c$export$9ea12e6597684af = "KEYBOARD_CATEGORY";
const $8a29e9b0d3dc349c$export$2f782da1dcec9699 = "KEYBOARD_DOWN";
const $8a29e9b0d3dc349c$export$71f4199cf5d644e1 = "KEYBOARD_UP";
class $8a29e9b0d3dc349c$export$a5c19b564dc41c2c extends $8a29e9b0d3dc349c$export$aa8e9462579016b1 {
    constructor(surface, type){
        super(surface, $8a29e9b0d3dc349c$export$9ea12e6597684af, type);
    }
}
const $8a29e9b0d3dc349c$export$5acce15900d111af = "SCROLL_CATEGORY";
const $8a29e9b0d3dc349c$export$ff567485663629e4 = "SCROLL_EVENT";
class $8a29e9b0d3dc349c$export$6b6e41529b479d4c extends $8a29e9b0d3dc349c$export$aa8e9462579016b1 {
    constructor(surface, type, position, delta){
        super(surface, $8a29e9b0d3dc349c$export$5acce15900d111af, type);
        this.position = position;
        this.delta = delta;
    }
}
const $8a29e9b0d3dc349c$export$a7f3c29903aaf76d = "FOCUS_CATEGORY";
const $8a29e9b0d3dc349c$export$16f7cbdecbe19b78 = "FOCUS_GAINED";
const $8a29e9b0d3dc349c$export$f82d7d72b9e09307 = "FOCUS_LOST";
class $8a29e9b0d3dc349c$export$ef2db9a302825184 extends $8a29e9b0d3dc349c$export$aa8e9462579016b1 {
    constructor(surface, FOCUS_GAINED1){
        super(surface, $8a29e9b0d3dc349c$export$a7f3c29903aaf76d, FOCUS_GAINED1);
    }
}
const $8a29e9b0d3dc349c$export$1b61a664d824d91b = "COMMAND_CATEGORY";
const $8a29e9b0d3dc349c$export$d7d7f0f0e8a54cf8 = "action";
class $8a29e9b0d3dc349c$export$4321e05f6706c18d extends $8a29e9b0d3dc349c$export$aa8e9462579016b1 {
    constructor(ctx, type, target){
        super(ctx, $8a29e9b0d3dc349c$export$1b61a664d824d91b, type);
        this.target = target;
    }
}
const $8a29e9b0d3dc349c$export$9e79ac99d4b68a26 = "change";
const $8a29e9b0d3dc349c$export$57832389c821635d = "CLIPBOARD_CATEGORY";
const $8a29e9b0d3dc349c$export$af734cf1b8165bed = "ClipboardCopy";
const $8a29e9b0d3dc349c$export$a43cee0a56e16595 = "ClipboardCut";
const $8a29e9b0d3dc349c$export$fdaf284d88231086 = "ClipboardPaste";
class $8a29e9b0d3dc349c$export$f7f37dd3b8ffe91f extends $8a29e9b0d3dc349c$export$aa8e9462579016b1 {
}
class $8a29e9b0d3dc349c$export$13bdd94145ae928f {
    constructor(id){
        this.id = id;
        this._size = new $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec(100, 100);
        this._position = new $8a29e9b0d3dc349c$export$baf26146a414f24a(0, 0);
        this._children = [];
        this._name = "unnamed";
        this._listeners = new Map();
        this._visible = true;
        this._hflex = false;
        this._vflex = false;
    }
    hflex() {
        return this._hflex;
    }
    set_hflex(hflex) {
        this._hflex = hflex;
    }
    vflex() {
        return this._vflex;
    }
    set_vflex(vflex) {
        this._vflex = vflex;
    }
    log(...args) {
        console.log(this.name(), ...args);
    }
    size() {
        return this._size;
    }
    set_size(size) {
        this._size = size;
    }
    position() {
        return this._position;
    }
    set_position(point) {
        this._position = point;
    }
    clip_children() {
        return false;
    }
    draw(g) {}
    get_children() {
        return this._children;
    }
    find_child(id) {
        // @ts-ignore
        return this.get_children().find((ch)=>ch.id === id);
    }
    add(view) {
        this._children.push(view);
    }
    remove(view) {
        this._children = this._children.filter((ch)=>ch !== view);
    }
    input(event) {}
    is_parent_view() {
        return true;
    }
    name() {
        return this._name;
    }
    set_name(name) {
        this._name = name;
    }
    on(type, cb) {
        this._get_listeners(type).push(cb);
    }
    off(type, cb) {
        this._listeners.set(type, this._get_listeners(type).filter((c)=>c != cb));
    }
    fire(type, payload) {
        this._get_listeners(type).forEach((cb)=>cb(payload));
    }
    visible() {
        return this._visible;
    }
    _get_listeners(type) {
        if (!this._listeners.has(type)) this._listeners.set(type, []);
        return this._listeners.get(type);
    }
    can_receive_mouse() {
        return false;
    }
}
class $8a29e9b0d3dc349c$export$920f40dd82baec9f {
    constructor(id){
        this.id = id;
        this._size = new $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec(100, 100);
        this._position = new $8a29e9b0d3dc349c$export$baf26146a414f24a(0, 0);
        this._visible = true;
        this._name = "unnamed";
        this._listeners = new Map();
        this._hflex = false;
        this._vflex = false;
    }
    hflex() {
        return this._hflex;
    }
    vflex() {
        return this._vflex;
    }
    log(...args) {
        console.log(`${this.name()}:`, ...args);
    }
    _get_listeners(type) {
        if (!this._listeners.has(type)) this._listeners.set(type, []);
        return this._listeners.get(type);
    }
    on(type, cb) {
        this._get_listeners(type).push(cb);
    }
    off(type, cb) {
        this._listeners.set(type, this._get_listeners(type).filter((c)=>c != cb));
    }
    fire(type, payload) {
        this._get_listeners(type).forEach((cb)=>cb(payload));
    }
    size() {
        return this._size;
    }
    set_size(size) {
        this._size = size;
    }
    position() {
        return this._position;
    }
    set_position(point) {
        this._position = point;
    }
    input(event) {}
    name() {
        return this._name;
    }
    set_name(name) {
        this._name = name;
    }
    visible() {
        return this._visible;
    }
    set_visible(visible) {
        this._visible = visible;
    }
}
function $8a29e9b0d3dc349c$export$9fdee197c47e806f(comp, json) {
    if (!json) throw new Error("null json object");
    if (!comp) throw new Error("null component");
    Object.keys(json).forEach((key)=>{
        //already handled type
        if (key === "type") return;
        //handle children separately
        if (key === "children") return;
        //id is a property instead of a setter
        if (key === "id") {
            // @ts-ignore
            comp.id = json.id;
            return;
        }
        let setter = `set_${key}`;
        // console.log("setting",key,setter)
        if (comp[setter]) comp[setter](json[key]);
        else console.log("no setter", setter);
    });
    return comp;
}
function $8a29e9b0d3dc349c$export$d4afaa3ba0ec3b47(view, cb) {
    view.on($8a29e9b0d3dc349c$export$d7d7f0f0e8a54cf8, cb);
    return view;
}
function $8a29e9b0d3dc349c$export$48697f005c434be7(view, cb) {
    view.on($8a29e9b0d3dc349c$export$9e79ac99d4b68a26, cb);
    return view;
}


var $c5e8e0cfa8a822f8$exports = {};

$parcel$export($c5e8e0cfa8a822f8$exports, "log", () => $c5e8e0cfa8a822f8$export$bef1f36f5486a6a3);
$parcel$export($c5e8e0cfa8a822f8$exports, "rect_from_pos_size", () => $c5e8e0cfa8a822f8$export$e8c1e4de1c401d98);
$parcel$export($c5e8e0cfa8a822f8$exports, "CanvasSurface", () => $c5e8e0cfa8a822f8$export$b6fe5971b24d23c8);
var $d9cc962363f968ed$exports = {};

$parcel$export($d9cc962363f968ed$exports, "ButtonBackgroundColor_active", () => $d9cc962363f968ed$export$e22171881e21e37d);
$parcel$export($d9cc962363f968ed$exports, "ButtonBackgroundColor_selected", () => $d9cc962363f968ed$export$d78081c6bf0643b7);
$parcel$export($d9cc962363f968ed$exports, "ButtonBackgroundColor", () => $d9cc962363f968ed$export$4b96206d0506e47f);
$parcel$export($d9cc962363f968ed$exports, "ButtonBorderColor", () => $d9cc962363f968ed$export$addd948fb18d2d08);
$parcel$export($d9cc962363f968ed$exports, "StandardSelectionColor", () => $d9cc962363f968ed$export$165f1f1fad5fbec5);
$parcel$export($d9cc962363f968ed$exports, "StandardTextColor", () => $d9cc962363f968ed$export$9b5aefa8b8f9f54);
$parcel$export($d9cc962363f968ed$exports, "StandardTextStyle", () => $d9cc962363f968ed$export$9f53be77959c9e4);
$parcel$export($d9cc962363f968ed$exports, "StandardTextHeight", () => $d9cc962363f968ed$export$63eec52eb5416473);
$parcel$export($d9cc962363f968ed$exports, "StandardVerticalMargin", () => $d9cc962363f968ed$export$58b2cdab93a993);
$parcel$export($d9cc962363f968ed$exports, "StandardLeftPadding", () => $d9cc962363f968ed$export$bc1d2e14213c9578);
$parcel$export($d9cc962363f968ed$exports, "StandardPanelBackgroundColor", () => $d9cc962363f968ed$export$6b1a51bbd32ad362);
const $d9cc962363f968ed$export$e22171881e21e37d = "#a3e3ff";
const $d9cc962363f968ed$export$d78081c6bf0643b7 = "#36baec";
const $d9cc962363f968ed$export$4b96206d0506e47f = "#e3e3e0";
const $d9cc962363f968ed$export$addd948fb18d2d08 = "#949492";
const $d9cc962363f968ed$export$165f1f1fad5fbec5 = $d9cc962363f968ed$export$e22171881e21e37d;
const $d9cc962363f968ed$export$9b5aefa8b8f9f54 = "#444";
const $d9cc962363f968ed$export$9f53be77959c9e4 = "16px sans-serif";
const $d9cc962363f968ed$export$63eec52eb5416473 = 20;
const $d9cc962363f968ed$export$58b2cdab93a993 = 10;
const $d9cc962363f968ed$export$bc1d2e14213c9578 = 5;
const $d9cc962363f968ed$export$6b1a51bbd32ad362 = "#f0f0f0";



function $c5e8e0cfa8a822f8$export$bef1f36f5486a6a3(...args) {
    console.log("SNAKE:", ...args);
}
const $c5e8e0cfa8a822f8$var$CLEAR_COLOR = "#f0f0f0";
function $c5e8e0cfa8a822f8$export$e8c1e4de1c401d98(point, size) {
    return new (0, $8a29e9b0d3dc349c$export$c79fc6492f3af13d)(point.x, point.y, size.w, size.h);
}
class $c5e8e0cfa8a822f8$var$MouseInputService {
    constructor(surface){
        this.surface = surface;
        this.down = false;
        this.last_point = new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(0, 0);
    }
    trigger_mouse_down(position, button) {
        this.down = true;
        this.last_point = position;
        this.path = this.scan_path(position);
        this.target = this.path[this.path.length - 1] // last
        ;
        let evt = new (0, $8a29e9b0d3dc349c$export$94806efd9890932f)(this.surface, (0, $8a29e9b0d3dc349c$export$1b45e8fa340ec4b9), position, new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(0, 0));
        evt.button = button;
        evt.target = this.target;
        this.propagatePointerEvent(evt, this.path);
        this.surface.repaint();
    }
    trigger_mouse_move(position, button) {
        let delta = position.subtract(this.last_point);
        this.last_point = position.clone();
        let evt;
        if (this.down) evt = new (0, $8a29e9b0d3dc349c$export$94806efd9890932f)(this.surface, (0, $8a29e9b0d3dc349c$export$bf9b45a2f73f134), position, delta);
        else {
            this.path = this.scan_path(position);
            evt = new (0, $8a29e9b0d3dc349c$export$94806efd9890932f)(this.surface, (0, $8a29e9b0d3dc349c$export$5c736a62aeec4dde), position, delta);
        }
        evt.button = button;
        evt.target = this.path[this.path.length - 1] // last
        ;
        this.propagatePointerEvent(evt, this.path);
        this.surface.repaint();
    }
    trigger_mouse_up(position, button) {
        this.down = false;
        let evt = new (0, $8a29e9b0d3dc349c$export$94806efd9890932f)(this.surface, (0, $8a29e9b0d3dc349c$export$325fffb5a0fb0686), position, new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(0, 0));
        evt.button = button;
        evt.target = this.path[this.path.length - 1] // last
        ;
        this.propagatePointerEvent(evt, this.path);
        this.surface.repaint();
    }
    trigger_scroll(position, delta) {
        this.path = this.scan_path(position);
        let evt = new (0, $8a29e9b0d3dc349c$export$6b6e41529b479d4c)(this.surface, (0, $8a29e9b0d3dc349c$export$ff567485663629e4), position, delta);
        this.propagateScrollEvent(evt, this.path);
    }
    calculate_path_to_cursor(view, position, path) {
        // this.log('searching for',position,'on',view.name())
        if (!view) return false;
        if (!view.visible()) return false;
        let bounds = $c5e8e0cfa8a822f8$export$e8c1e4de1c401d98(view.position(), view.size());
        if (bounds.contains(position)) {
            // @ts-ignore
            if (view.is_parent_view && view.is_parent_view()) {
                let parent = view;
                // go in reverse order to the top drawn children are picked first
                for(let i = parent.get_children().length - 1; i >= 0; i--){
                    let ch = parent.get_children()[i];
                    let pos = position.subtract(view.position());
                    let picked = this.calculate_path_to_cursor(ch, pos, path);
                    if (picked) {
                        path.unshift(ch);
                        return true;
                    }
                }
                if (parent.can_receive_mouse()) return true;
            } else return true;
        }
        return false;
    }
    log(...args) {
        console.log("MouseService:", ...args);
    }
    scan_path(position) {
        let path = [];
        this.calculate_path_to_cursor(this.surface.root(), position, path);
        // this.log("final path is",path)
        return path;
    }
    propagatePointerEvent(evt, path) {
        let stopped = false;
        let pt = evt.position;
        path.forEach((view)=>{
            if (stopped) {
                this.log("done");
                return;
            }
            // this.log("down: view",view.name())
            evt.position = evt.position.subtract(view.position());
            view.input(evt);
            if (evt.stopped) stopped = true;
        });
    }
    propagateScrollEvent(evt, path) {
        let stopped = false;
        let pt = evt.position.clone();
        evt.direction = "down";
        path.forEach((view)=>{
            if (stopped) return;
            evt.position = evt.position.subtract(view.position());
            view.input(evt);
            if (evt.stopped) stopped = true;
        });
        if (stopped) return;
        path.reverse();
        evt.direction = "up";
        path.forEach((view)=>{
            if (stopped) // this.log("done")
            return;
            evt.position = evt.position.add(view.position());
            view.input(evt);
            if (evt.stopped) stopped = true;
        });
    }
}
class $c5e8e0cfa8a822f8$var$KeyboardInputService {
    log(...args) {
        console.log("KeyboardService:", ...args);
    }
    constructor(surface){
        this.surface = surface;
    }
    dispatch_keyboard_focus_change(old_focus, new_focus) {
        let e_old = new (0, $8a29e9b0d3dc349c$export$ef2db9a302825184)(this.surface, (0, $8a29e9b0d3dc349c$export$f82d7d72b9e09307));
        //send focus lost to old focus
        if (old_focus) old_focus.input(e_old);
        //send focus gained to new focus
        let e_new = new (0, $8a29e9b0d3dc349c$export$ef2db9a302825184)(this.surface, (0, $8a29e9b0d3dc349c$export$16f7cbdecbe19b78));
        if (new_focus) new_focus.input(e_new);
    //don't use a path, no one can intercept?
    }
    calculate_path_to_keyboard_focus(root, target) {
        if (!root) return false;
        if (!root.visible()) return false;
        if (root === target) return [
            root
        ];
        // @ts-ignore
        if (root.is_parent_view && root.is_parent_view()) {
            let parent = root;
            for(let i = parent.get_children().length - 1; i >= 0; i--){
                let ch = parent.get_children()[i];
                // this.log('checking child',ch)
                let res = this.calculate_path_to_keyboard_focus(ch, target);
                if (res) {
                    res.unshift(root);
                    return res;
                }
            }
        }
    }
    trigger_key_down(key, code, modifiers) {
        let evt = new (0, $8a29e9b0d3dc349c$export$a5c19b564dc41c2c)(this.surface, (0, $8a29e9b0d3dc349c$export$2f782da1dcec9699));
        evt.key = key;
        evt.code = code;
        evt.modifiers = modifiers;
        let path = this.calculate_path_to_keyboard_focus(this.surface.root(), this.surface.keyboard_focus());
        this.surface.propagateKeyboardEvent(evt, path);
        this.surface.repaint();
    }
    trigger_key_up(key, code, modifiers) {
        let evt = new (0, $8a29e9b0d3dc349c$export$a5c19b564dc41c2c)(this.surface, (0, $8a29e9b0d3dc349c$export$71f4199cf5d644e1));
        evt.key = key;
        evt.code = code;
        evt.modifiers = modifiers;
        let path = this.calculate_path_to_keyboard_focus(this.surface.root(), this.surface.keyboard_focus());
        this.surface.propagateKeyboardEvent(evt, path);
        this.surface.repaint();
    }
}
class $c5e8e0cfa8a822f8$export$b6fe5971b24d23c8 {
    size() {
        return new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(this.w, this.h);
    }
    global_smoothing = true;
    constructor(w, h, scale){
        this.log("making canvas ", w, h);
        this.w = w;
        this.h = h;
        this.scale = this.scale || 1;
        this._sprite_scale = 1;
        this._sprite_smooth = true;
        this.canvas = document.createElement("canvas");
        this.canvas.width = w * window.devicePixelRatio * this.scale;
        this.canvas.height = h * window.devicePixelRatio * this.scale;
        this.log("real canvas is", this.canvas.width, this.canvas.height);
        this.canvas.setAttribute("tabindex", "0");
        //turn this on for high-dpi support
        this.canvas.style.width = `${this.w * this.scale}px`;
        this.canvas.style.height = `${this.h * this.scale}px`;
        this.log("canvas style = ", this.canvas.style);
        this.ctx = this.canvas.getContext("2d");
        this.debug = false;
        this.clear();
        this.fonts = new Map();
        this._pointer_target = null;
    }
    addToPage() {
        document.body.appendChild(this.canvas);
    }
    set_root(root) {
        this._root = root;
    }
    root() {
        return this._root;
    }
    repaint() {
        if (this.debug) console.time("repaint");
        this.layout_stack();
        this.clear();
        this.draw_stack();
        if (this.debug) console.timeEnd("repaint");
    }
    clear() {
        this.ctx.fillStyle = $c5e8e0cfa8a822f8$var$CLEAR_COLOR;
        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    }
    layout_stack() {
        if (!this._root) console.warn("root is null");
        else {
            let available_size = new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(this.w, this.h);
            // this.log("layout_stack with size",available_size)
            let size = this._root.layout(this, available_size);
        // console.log("canvas, root requested",size)
        }
    }
    draw_stack() {
        this.ctx.imageSmoothingEnabled = this.global_smoothing;
        this.ctx.save();
        this.ctx.translate(0.5, 0.5);
        this.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
        this.ctx.scale(this.scale, this.scale);
        this.debug_draw_rect(new (0, $8a29e9b0d3dc349c$export$c79fc6492f3af13d)(0, 0, this.w - 1, this.h - 1), "canvas");
        if (this._root) this.draw_view(this._root);
        this.ctx.restore();
    }
    draw_view(view) {
        this.ctx.save();
        let pos = view.position();
        this.ctx.translate(pos.x, pos.y);
        // @ts-ignore
        // console.log("drawing",view.id,view.name())
        if (view.visible()) view.draw(this);
        // @ts-ignore
        if (view.is_parent_view && view.is_parent_view() && view.visible()) {
            let parent = view;
            if (parent.clip_children()) {
                this.ctx.beginPath();
                let size = view.size();
                this.ctx.rect(0, 0, size.w, size.h);
                this.ctx.clip();
            }
            parent.get_children().forEach((ch)=>{
                if (this.debug) this.ctx.save();
                this.draw_view(ch);
                if (this.debug) this.ctx.restore();
            });
        }
        let bds = $c5e8e0cfa8a822f8$export$e8c1e4de1c401d98(view.position(), view.size());
        // @ts-ignore
        this.debug_draw_rect(bds, view.name());
        this.ctx.restore();
    }
    fill(rect, color) {
        this.ctx.fillStyle = color;
        this.ctx.fillRect(rect.x, rect.y, rect.w, rect.h);
    }
    stroke(rect, color) {
        this.ctx.lineWidth = 1 * this.scale;
        this.ctx.strokeStyle = color;
        this.ctx.strokeRect(rect.x, rect.y, rect.w, rect.h);
    }
    fillBackgroundSize(size, color) {
        this.ctx.fillStyle = color;
        this.ctx.fillRect(0, 0, size.w, size.h);
    }
    strokeBackgroundSize(size, color) {
        this.ctx.strokeStyle = color;
        this.ctx.strokeRect(0, 0, size.w, size.h);
    }
    debug_draw_rect(bds, title) {
        if (!this.debug) return;
        this.ctx.strokeStyle = "black";
        this.ctx.lineWidth = 0.5;
        let cx = bds.x + bds.w / 2;
        let cy = bds.y + bds.h / 2;
        for(let i = 0; i < 3; i++){
            this.ctx.beginPath();
            this.ctx.strokeStyle = i % 2 === 1 ? "red" : "black";
            this.ctx.rect(bds.x + i, bds.y + i, bds.w - i * 2, bds.h - i * 2);
            this.ctx.stroke();
        }
        let str = `${title} (${bds.x.toFixed(1)},${bds.y.toFixed(1)}) (${bds.w.toFixed(1)}x${bds.h.toFixed(1)})`;
        for(let i1 = 0; i1 < 3; i1++){
            this.ctx.font = "10px sans-serif";
            this.ctx.fillStyle = "white";
            this.ctx.fillText(str, cx + 3 + i1, cy + 3 + i1);
        }
        for(let i2 = 0; i2 < 1; i2++){
            this.ctx.font = "10px sans-serif";
            this.ctx.fillStyle = "black";
            this.ctx.fillText(str, cx + 3 + i2 + 1, cy + 3 + i2 + 1);
        }
    }
    fillRect(x, y, w, h, color) {
        this.ctx.fillStyle = color;
        this.ctx.fillRect(x, y, w, h);
    }
    screen_to_local(evt) {
        let rect = this.canvas.getBoundingClientRect();
        let pt = new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(evt.x - rect.x, evt.y - rect.y);
        pt.x /= this.scale;
        pt.y /= this.scale;
        return pt;
    }
    propagateKeyboardEvent(evt, path) {
        if (this._input_callback) this._input_callback(evt);
        if (!this._keyboard_focus) // if(this._input_callback) this._input_callback(evt)
        return;
        if (!path) {
            this.log("no path, can't propagate");
            return;
        }
        let stopped = false;
        path.forEach((view)=>{
            if (stopped) {
                this.log("bailing out early");
                return;
            }
            view.input(evt);
            if (evt.stopped) stopped = true;
        });
    // if(this._keyboard_focus) this._keyboard_focus.input(evt)
    // if(this._input_callback) this._input_callback(evt)
    }
    keyboard_focus() {
        return this._keyboard_focus;
    }
    set_keyboard_focus(view) {
        let old = this._keyboard_focus;
        this._keyboard_focus = view;
        this.keyboard.dispatch_keyboard_focus_change(old, this._keyboard_focus);
    }
    is_keyboard_focus(view) {
        return view === this._keyboard_focus;
    }
    release_keyboard_focus(view) {
        this._keyboard_focus = null;
    }
    on_input(cb) {
        this._input_callback = cb;
    }
    measureText(caption, font_name) {
        if (font_name && this.fonts.has(font_name)) {
            let font = this.fonts.get(font_name);
            if (font) return font.measureText(caption);
        }
        this.ctx.font = (0, $d9cc962363f968ed$export$9f53be77959c9e4);
        let metrics = this.ctx.measureText(caption);
        if ("fontBoundingBoxAscent" in metrics) return new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(metrics.width, metrics.fontBoundingBoxAscent + metrics.fontBoundingBoxDescent);
        return new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(metrics.width, 16);
    }
    fillStandardText(caption, x, y, font_name, scale) {
        if (!scale) scale = 1;
        if (font_name && this.fonts.has(font_name)) {
            let font = this.fonts.get(font_name);
            if (font) {
                font.fillText(this.ctx, caption, x, y - (0, $d9cc962363f968ed$export$63eec52eb5416473), scale);
                return;
            }
        }
        this.ctx.fillStyle = (0, $d9cc962363f968ed$export$9b5aefa8b8f9f54);
        this.ctx.font = (0, $d9cc962363f968ed$export$9f53be77959c9e4);
        this.ctx.fillText(caption, x, y);
    }
    draw_glyph(codepoint, x, y, font_name, fill, scale) {
        if (!scale) scale = 1;
        this.ctx.fillStyle = fill;
        if (font_name && this.fonts.has(font_name)) {
            let font = this.fonts.get(font_name);
            if (font) font.draw_glpyh(this.ctx, codepoint, x, y, scale);
        }
    }
    log(...args) {
        console.log("CANVAS: ", ...args);
    }
    load_jsonfont(basefont_data, name, ref_name) {
        let fnt = basefont_data.fonts.find((ft)=>ft.name === name);
        this.fonts.set(ref_name, new $c5e8e0cfa8a822f8$var$CanvasFont(fnt));
    }
    set_sprite_scale(scale) {
        this._sprite_scale = scale;
    }
    set_smooth_sprites(sprite_smoothing) {
        this._sprite_smooth = sprite_smoothing;
    }
    draw_sprite(pt, sprite) {
        if (!sprite) {
            console.warn("sprite missing");
            return;
        }
        this.ctx.imageSmoothingEnabled = this._sprite_smooth;
        this.ctx.drawImage(sprite._img, pt.x, pt.y, sprite._img.width * this._sprite_scale, sprite._img.height * this._sprite_scale);
    }
    draw_tilemap(tilemap, sheet, x, y, scale) {
        tilemap.forEachPixel((val, i, j)=>{
            if (!val || val === 0) return;
            // let sheet = this.doc.get_selected_sheet()
            let tile = sheet.sprites.find((t)=>t.id === val);
            this.ctx.imageSmoothingEnabled = false;
            if (tile) this.ctx.drawImage(tile._img, x + i * scale, y + j * scale, scale, scale);
        });
    }
    find_by_name(name) {
        return this.find_by_name_view(this._root, name);
    }
    find_by_name_view(view, name) {
        if (view.name() === name) return view;
        // @ts-ignore
        if (view.is_parent_view && view.is_parent_view()) {
            let parent = view;
            // go in reverse order to the top drawn children are picked first
            for(let i = parent.get_children().length - 1; i >= 0; i--){
                let ch = parent.get_children()[i];
                let res = this.find_by_name_view(ch, name);
                if (res) return res;
            }
        }
        return null;
    }
    local_to_view(pt, view) {
        let trans = this.calculate_transform_to(this._root, view);
        let f = pt.subtract(trans);
        return f;
    }
    calculate_transform_to(root, view) {
        if (root === view) return root.position().clone();
        // @ts-ignore
        if (root.is_parent_view && root.is_parent_view()) {
            let parent = root;
            for(let i = 0; i < parent.get_children().length; i++){
                let ch = parent.get_children()[i];
                let ptx = this.calculate_transform_to(ch, view);
                if (ptx) return ptx.add(root.position());
            }
        }
        return null;
    }
    view_to_local(pt, view) {
        let trans = this.calculate_transform_to(this._root, view);
        return pt.add(trans);
    }
    _setup_mouse_input() {
        this.mouse = new $c5e8e0cfa8a822f8$var$MouseInputService(this);
        this.canvas.addEventListener("contextmenu", (e)=>{
            e.preventDefault();
            return false;
        });
        this.canvas.addEventListener("mousedown", (domEvent)=>{
            let position = this.screen_to_local(domEvent);
            this.mouse.trigger_mouse_down(position, domEvent.button);
            if (this._input_callback) this._input_callback({});
            domEvent.preventDefault();
        });
        this.canvas.addEventListener("mousemove", (domEvent)=>{
            let position = this.screen_to_local(domEvent);
            this.mouse.trigger_mouse_move(position, domEvent.button);
            if (this._input_callback) this._input_callback({});
            domEvent.preventDefault();
        });
        this.canvas.addEventListener("mouseup", (domEvent)=>{
            let position = this.screen_to_local(domEvent);
            this.mouse.trigger_mouse_up(position, domEvent.button);
            if (this._input_callback) this._input_callback({});
            domEvent.preventDefault();
        });
        this.canvas.addEventListener("wheel", (domEvent)=>{
            let position = this.screen_to_local(domEvent);
            let delta = new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(domEvent.deltaX, domEvent.deltaY);
            this.mouse.trigger_scroll(position, delta);
            if (this._input_callback) this._input_callback({});
            domEvent.preventDefault();
        });
    }
    _setup_keyboard_input() {
        this.keyboard = new $c5e8e0cfa8a822f8$var$KeyboardInputService(this);
        document.addEventListener("keydown", (e)=>{
            let modifiers = {
                alt: e.altKey,
                ctrl: e.ctrlKey,
                meta: e.metaKey,
                shift: e.shiftKey
            };
            this.keyboard.trigger_key_down(e.key, e.code, modifiers);
            if (!e.altKey && !e.metaKey) e.preventDefault();
        });
        document.addEventListener("keyup", (e)=>{
            let modifiers = {
                alt: e.altKey,
                ctrl: e.ctrlKey,
                meta: e.metaKey,
                shift: e.shiftKey
            };
            this.keyboard.trigger_key_up(e.key, e.code, modifiers);
            if (!e.altKey && !e.metaKey) e.preventDefault();
        });
    }
    start() {
        this.addToPage();
        this._setup_mouse_input();
        this._setup_keyboard_input();
        this.repaint();
    }
}
class $c5e8e0cfa8a822f8$var$CanvasFont {
    scale = 2;
    constructor(data){
        this.data = data;
        this.metas = new Map();
        this.data.glyphs.forEach((gl)=>{
            this.generate_image(gl);
            this.metas.set(gl.meta.codepoint, gl);
        });
    }
    measureText(text) {
        let xoff = 0;
        let h = 0;
        for(let i = 0; i < text.length; i++){
            let cp = text.codePointAt(i);
            if (this.metas.has(cp)) {
                let glyph = this.metas.get(cp);
                let sw = glyph.w - glyph.meta.left - glyph.meta.right;
                xoff += sw + 1;
                h = Math.max(h, glyph.h);
            } else {
                xoff += 10;
                h = Math.max(h, 10);
            }
        }
        return new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(xoff * this.scale, h * this.scale);
    }
    fillText(ctx, text, x, y, scale) {
        if (!scale) scale = 1;
        ctx.fillStyle = "red";
        let size = this.measureText(text);
        let xoff = 0;
        let yoff = 2;
        // ctx.fillRect(x+xoff, y+yoff, size.w, size.h)
        for(let i = 0; i < text.length; i++){
            let cp = text.codePointAt(i);
            let dx = x + xoff * this.scale * scale;
            if (this.metas.has(cp)) {
                let glyph = this.metas.get(cp);
                ctx.imageSmoothingEnabled = false;
                //@ts-ignore
                let img = glyph.img;
                let sx = glyph.meta.left;
                let sy = 0;
                let sw = glyph.w - glyph.meta.left - glyph.meta.right;
                let sh = glyph.h //- glyph.meta.baseline
                ;
                let dy = y + (yoff + glyph.meta.baseline - 1) * this.scale * scale;
                let dw = sw * this.scale * scale;
                let dh = sh * this.scale * scale;
                ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh);
                xoff += sw + 1;
            } else {
                //missing the glyph
                let ew = 8;
                let dy = y + yoff * this.scale * scale;
                ctx.strokeRect(dx, dy, ew * this.scale * scale, ew * this.scale * scale);
                xoff += ew + 1;
            }
        }
    }
    draw_glpyh(ctx, cp, x, y, scale) {
        let xoff = 0;
        let yoff = 2;
        if (this.metas.has(cp)) {
            let glyph = this.metas.get(cp);
            ctx.imageSmoothingEnabled = false;
            //@ts-ignore
            let img = glyph.img;
            let sx = glyph.meta.left;
            let sy = 0;
            let sw = glyph.w - glyph.meta.left - glyph.meta.right;
            let sh = glyph.h //- glyph.meta.baseline
            ;
            let dx = x + xoff * this.scale * scale;
            let dy = y + (yoff + glyph.meta.baseline - 1) * this.scale * scale;
            let dw = sw * this.scale * scale;
            let dh = sh * this.scale * scale;
            ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh);
        }
    }
    generate_image(gl) {
        gl.img = document.createElement("canvas");
        gl.img.width = gl.w;
        gl.img.height = gl.h;
        let c = gl.img.getContext("2d");
        c.fillStyle = "green";
        c.fillRect(0, 0, gl.img.width, gl.img.height);
        for(let j = 0; j < gl.h; j++)for(let i = 0; i < gl.w; i++){
            let n = j * gl.w + i;
            let v = gl.data[n];
            if (v % 2 === 0) {
                c.fillStyle = "white";
                // c.fillRect(i, j, 1, 1)
                c.clearRect(i, j, 1, 1);
            }
            if (v % 2 === 1) {
                c.fillStyle = "black";
                c.fillRect(i, j, 1, 1);
            }
        }
    }
}


var $826b0a205f7d3f10$exports = {};

$parcel$export($826b0a205f7d3f10$exports, "Sprite", () => $826b0a205f7d3f10$export$3075603db8e6204c);
$parcel$export($826b0a205f7d3f10$exports, "Sheet", () => $826b0a205f7d3f10$export$a9bf29f8d87ebbee);
$parcel$export($826b0a205f7d3f10$exports, "Tilemap", () => $826b0a205f7d3f10$export$cfd67673ae2d63ae);
$parcel$export($826b0a205f7d3f10$exports, "SpriteGlyph", () => $826b0a205f7d3f10$export$dcdc9aec859ae544);
$parcel$export($826b0a205f7d3f10$exports, "SpriteFont", () => $826b0a205f7d3f10$export$e1896ac0c4970221);
$parcel$export($826b0a205f7d3f10$exports, "load_assets_from_json", () => $826b0a205f7d3f10$export$e64f54f76151192b);

class $826b0a205f7d3f10$export$3075603db8e6204c {
    constructor(id, name, w, h, palette){
        this.id = id || (0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("unknown");
        this.name = name || "unknown";
        this.w = w;
        this.h = h;
        this.data = [];
        for(let i = 0; i < this.w * this.h; i++)this.data[i] = 0;
        this._img = document.createElement("canvas");
        this._img.width = this.w;
        this._img.height = this.h;
        this.palette = palette;
    }
    forEachPixel(cb) {
        for(let j = 0; j < this.h; j++)for(let i = 0; i < this.w; i++){
            let n = j * this.w + i;
            let v = this.data[n];
            cb(v, i, j);
        }
    }
    set_pixel(x, y, color) {
        let n = y * this.w + x;
        this.data[n] = color;
        this.sync();
    }
    sync() {
        // console.log("syncing a sprite")
        let c = this._img.getContext("2d");
        let pal = this.palette.get_color_palette();
        c.clearRect(0, 0, this._img.width, this._img.height);
        this.forEachPixel((v, i, j)=>{
            c.fillStyle = pal[v];
            c.fillRect(i, j, 1, 1);
        });
    }
    get_pixel(x, y) {
        let n = y * this.w + x;
        return this.data[n];
    }
    toJsonObj() {
        return {
            clazz: "Sprite",
            id: this.id,
            name: this.name,
            w: this.w,
            h: this.h,
            data: this.data
        };
    }
}
class $826b0a205f7d3f10$export$a9bf29f8d87ebbee {
    constructor(id, name){
        this.id = id || (0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("unknown");
        this.name = name || "unknown";
        this.sprites = [];
    }
    add(sprite) {
        this.sprites.push(sprite);
    }
    toJsonObj() {
        return {
            clazz: "Sheet",
            id: this.id,
            name: this.name,
            sprites: this.sprites.map((sp)=>sp.toJsonObj())
        };
    }
}
class $826b0a205f7d3f10$export$cfd67673ae2d63ae {
    constructor(id, name, w, h){
        this.id = id || (0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("unknown");
        this.name = name || "unknown";
        this.w = w;
        this.h = h;
        this.data = [];
        for(let i = 0; i < this.w * this.h; i++)this.data[i] = 0;
    }
    forEachPixel(cb) {
        for(let j = 0; j < this.h; j++)for(let i = 0; i < this.w; i++){
            let n = j * this.w + i;
            let v = this.data[n];
            cb(v, i, j);
        }
    }
    expand_width(number) {
        let new_tm = new $826b0a205f7d3f10$export$cfd67673ae2d63ae("temp", "temp", this.w + number, this.h);
        this.forEachPixel((val, i, j)=>{
            new_tm.set_pixel(i, j, val);
        });
        this.data = new_tm.data;
        this.w = new_tm.w;
        this.h = new_tm.h;
    }
    set_pixel(x, y, color) {
        let n = y * this.w + x;
        this.data[n] = color;
    }
    get_pixel(x, y) {
        let n = y * this.w + x;
        return this.data[n];
    }
    toJsonObj() {
        return {
            clazz: "Tilemap",
            id: this.id,
            name: this.name,
            w: this.w,
            h: this.h,
            data: this.data
        };
    }
}
class $826b0a205f7d3f10$export$dcdc9aec859ae544 extends $826b0a205f7d3f10$export$3075603db8e6204c {
    constructor(id, name, w, h, palette){
        super(id, name, w, h, palette);
        this.meta = {
            codepoint: 300,
            left: 0,
            right: 0,
            baseline: 0
        };
    }
    sync() {
        // console.log("syncing SpriteGlyph")
        let c = this._img.getContext("2d");
        this.forEachPixel((v, i, j)=>{
            if (v % 2 === 0) {
                c.fillStyle = "white";
                c.fillRect(i, j, 1, 1);
            }
            if (v % 2 === 1) {
                c.fillStyle = "black";
                c.fillRect(i, j, 1, 1);
            }
        });
    }
    toJsonObj() {
        let obj = super.toJsonObj();
        // @ts-ignore
        obj.clazz = "Glyph";
        // @ts-ignore
        obj.meta = this.meta;
        // @ts-ignore
        // console.log("saving out",obj.meta)
        return obj;
    }
}
class $826b0a205f7d3f10$export$e1896ac0c4970221 {
    // private _selected_glyph_index: number;
    constructor(id, name){
        this.id = id || (0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("unknown");
        this.name = name || "unknown";
        this.glyphs = [];
    // this._selected_glyph_index = 0
    }
    toJsonObj() {
        return {
            clazz: "Font",
            id: this.id,
            name: this.name,
            glyphs: this.glyphs.map((sp)=>sp.toJsonObj())
        };
    }
    add(spriteGlyph) {
        this.glyphs.push(spriteGlyph);
    }
}
const $826b0a205f7d3f10$var$GRAYSCALE_PALETTE = [
    "#ff00ff",
    "#f0f0f0",
    "#d0d0d0",
    "#909090",
    "#404040", 
];
function $826b0a205f7d3f10$var$obj_to_class(sh, doc) {
    if (sh.clazz === "Sprite") {
        console.log("making a sprite", sh.id, sh.name);
        let sprite = new $826b0a205f7d3f10$export$3075603db8e6204c(sh.id, sh.name, sh.w, sh.h, doc);
        sprite.data = sh.data;
        sprite.sync();
        console.log("called sync");
        return sprite;
    }
    if (sh.clazz === "Tilemap") {
        let tilemap = new $826b0a205f7d3f10$export$cfd67673ae2d63ae(sh.id, sh.name, sh.w, sh.h);
        tilemap.data = sh.data;
        return tilemap;
    }
    if (sh.clazz === "Sheet") {
        console.log("making a sheet", sh.id, sh.name);
        let sheet = new $826b0a205f7d3f10$export$a9bf29f8d87ebbee(sh.id, sh.name);
        sheet.sprites = sh.sprites.map((sp)=>$826b0a205f7d3f10$var$obj_to_class(sp, doc));
        return sheet;
    }
    if (sh.clazz === "Font") {
        let font = new $826b0a205f7d3f10$export$e1896ac0c4970221(sh.id, sh.name);
        font.glyphs = sh.glyphs.map((g)=>$826b0a205f7d3f10$var$obj_to_class(g, doc));
        return font;
    }
    if (sh.clazz === "Glyph") {
        let glyph = new $826b0a205f7d3f10$export$dcdc9aec859ae544(sh.id, sh.name, sh.w, sh.h, doc);
        glyph.data = sh.data;
        glyph.meta = sh.meta;
        if (!glyph.meta.left) glyph.meta.left = 0;
        if (!glyph.meta.right) glyph.meta.right = 0;
        if (!glyph.meta.baseline) glyph.meta.baseline = 0;
        glyph.sync();
        return glyph;
    }
    throw new Error(`don't know how to deserialize ${sh.clazz}`);
}
class $826b0a205f7d3f10$var$AssetsDocImpl {
    constructor(){
        this.sheets = [];
        this.fonts = [];
        this.maps = [];
    }
    get_color_palette() {
        return this._color_palette;
    }
    find_sheet(name) {
        return this.sheets.find((sh)=>sh.name === name);
    }
    find_sprite(sheet_name, sprite_name) {
        let sheet = this.find_sheet(sheet_name);
        return sheet.sprites.find((sp)=>sp.name === sprite_name);
    }
}
function $826b0a205f7d3f10$export$e64f54f76151192b(data) {
    if (data.version === 1) {
        if (data.fonts && data.fonts.length > 0) {
            console.log("pretending to upgrade the document");
            data.version = 2;
        } else {
            console.log("really upgrade");
            data.maps.forEach((mp)=>{
                console.log("converting", mp);
                mp.clazz = "Tilemap";
                if (!mp.id) mp.id = (0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("tilemap");
                if (!mp.name) mp.name = (0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("unknown");
                return mp;
            });
            data.version = 2;
        }
    }
    if (data.version === 2) {
        data.color_palette = $826b0a205f7d3f10$var$GRAYSCALE_PALETTE;
        data.version = 3;
    }
    if (data.version !== 3) throw new Error("we can only parse version 3 json");
    if (data.name) this._name = data.name;
    let obj = new $826b0a205f7d3f10$var$AssetsDocImpl();
    obj._color_palette = data.color_palette;
    obj.sheets = data.sheets.map((sh)=>$826b0a205f7d3f10$var$obj_to_class(sh, obj));
    obj.fonts = data.fonts.map((fnt)=>$826b0a205f7d3f10$var$obj_to_class(fnt, obj));
    obj.maps = data.maps.map((mp)=>$826b0a205f7d3f10$var$obj_to_class(mp, obj));
    return obj;
}


var $13755f3aa883028b$exports = {};

$parcel$export($13755f3aa883028b$exports, "Label", () => $13755f3aa883028b$export$b04be29aa201d4f5);
$parcel$export($13755f3aa883028b$exports, "CustomLabel", () => $13755f3aa883028b$export$6d2887785673b206);
$parcel$export($13755f3aa883028b$exports, "ActionButton", () => $13755f3aa883028b$export$cfc7921d29ef7b80);
$parcel$export($13755f3aa883028b$exports, "BaseSelectButton", () => $13755f3aa883028b$export$62bbe4e48c45d049);
$parcel$export($13755f3aa883028b$exports, "ToggleButton", () => $13755f3aa883028b$export$d2b052e7b4be1756);
$parcel$export($13755f3aa883028b$exports, "CheckButton", () => $13755f3aa883028b$export$c767f14fef25f1ed);
$parcel$export($13755f3aa883028b$exports, "RadioButton", () => $13755f3aa883028b$export$f4422ae58352e179);
$parcel$export($13755f3aa883028b$exports, "IconButton", () => $13755f3aa883028b$export$c25acd513dcc8062);
$parcel$export($13755f3aa883028b$exports, "SelectList", () => $13755f3aa883028b$export$ed433d8050015de5);
$parcel$export($13755f3aa883028b$exports, "Header", () => $13755f3aa883028b$export$8b251419efc915eb);
$parcel$export($13755f3aa883028b$exports, "HSpacer", () => $13755f3aa883028b$export$ba8fe6b2d373b3a3);
$parcel$export($13755f3aa883028b$exports, "FontIcon", () => $13755f3aa883028b$export$f56ea46797033f60);
$parcel$export($13755f3aa883028b$exports, "DropdownButton", () => $13755f3aa883028b$export$181f40ec41159e56);
$parcel$export($13755f3aa883028b$exports, "TextLine", () => $13755f3aa883028b$export$4377c71588c2474b);
$parcel$export($13755f3aa883028b$exports, "NumberTextLine", () => $13755f3aa883028b$export$c925c7a625b1377e);


var $7a0175d4f0ca63f6$exports = {};

$parcel$export($7a0175d4f0ca63f6$exports, "LayerView", () => $7a0175d4f0ca63f6$export$aa949f9e1540fee1);
$parcel$export($7a0175d4f0ca63f6$exports, "HBox", () => $7a0175d4f0ca63f6$export$e2a0406e25a673da);
$parcel$export($7a0175d4f0ca63f6$exports, "VBox", () => $7a0175d4f0ca63f6$export$c1b74fc959ecff8e);
$parcel$export($7a0175d4f0ca63f6$exports, "GrowPanel", () => $7a0175d4f0ca63f6$export$6f2cdf4b4a19686b);
$parcel$export($7a0175d4f0ca63f6$exports, "ScrollView", () => $7a0175d4f0ca63f6$export$5665e3d6be6adea);
$parcel$export($7a0175d4f0ca63f6$exports, "PopupContainer", () => $7a0175d4f0ca63f6$export$cca08eed9de89ba9);
$parcel$export($7a0175d4f0ca63f6$exports, "PopupLayer", () => $7a0175d4f0ca63f6$export$3f2861baa75f4ff5);
$parcel$export($7a0175d4f0ca63f6$exports, "DialogLayer", () => $7a0175d4f0ca63f6$export$9272eaa8a91f79dc);
$parcel$export($7a0175d4f0ca63f6$exports, "DialogContainer", () => $7a0175d4f0ca63f6$export$547754aada6e339f);
$parcel$export($7a0175d4f0ca63f6$exports, "KeystrokeCaptureView", () => $7a0175d4f0ca63f6$export$59fd15e59ca9b1e0);

class $7a0175d4f0ca63f6$export$aa949f9e1540fee1 extends (0, $8a29e9b0d3dc349c$export$13bdd94145ae928f) {
    constructor(name){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("layer"));
        this._type = "layer-view";
        if (name) this._name = name;
    }
    draw(g) {}
    layout(g, available) {
        this._children.forEach((ch)=>ch.layout(g, available));
        this.set_size(available);
        return available;
    }
    set_visible(visible) {
        this._visible = visible;
    }
}
class $7a0175d4f0ca63f6$export$e2a0406e25a673da extends (0, $8a29e9b0d3dc349c$export$13bdd94145ae928f) {
    constructor(){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("hbox"));
        this._valign = "top";
        this.pad = 0;
        this._fill = null;
    }
    set_fill(fill) {
        this._fill = fill;
    }
    set_valign(valign) {
        this._valign = valign;
    }
    layout(g, real_available) {
        let available = real_available.shrink(this.pad);
        //split out flex and non-flex children
        let yes_flex = this._children.filter((ch)=>ch.hflex());
        let non_flex = this._children.filter((ch)=>!ch.hflex());
        //call layout on the non-flex children first
        let total_w = 0;
        let leftover_w = available.w;
        non_flex.map((ch)=>{
            let size = ch.layout(g, new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(leftover_w, available.h));
            total_w += size.w;
            leftover_w -= size.w;
        });
        if (yes_flex.length > 0) {
            //allocate the rest of the space equally to the flex children
            let flex_avail = new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)((available.w - total_w) / yes_flex.length, available.h);
            //call layout on the flex children
            yes_flex.map((ch)=>{
                let size = ch.layout(g, flex_avail);
                total_w += size.w;
            });
        }
        let maxh = 0;
        //find the max height
        this.get_children().forEach((ch)=>maxh = Math.max(ch.size().h, maxh));
        let nx = this.pad;
        let ny = this.pad;
        //place all children (they've already set their width and height)
        this._children.forEach((ch)=>{
            if (this._valign === "top") ch.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(nx, ny));
            if (this._valign === "center") ch.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(nx, (maxh - ch.size().h) / 2));
            if (this._valign === "bottom") ch.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(nx, maxh - ch.size().h));
            if (this._valign === "stretch") {
                ch.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(nx, ny));
                ch.size().h = maxh;
            }
            nx += ch.size().w;
        });
        //return own size
        this.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(nx + this.pad * 2, maxh + this.pad * 2));
        if (this.vflex()) this.size().h = real_available.h;
        if (this.hflex()) this.size().w = real_available.w;
        return this.size();
    }
    draw(g) {
        if (this._fill) g.fillBackgroundSize(this.size(), this._fill);
    }
}
class $7a0175d4f0ca63f6$export$c1b74fc959ecff8e extends (0, $8a29e9b0d3dc349c$export$13bdd94145ae928f) {
    constructor(){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("vbox"));
        this._fill = null;
        this.halign = "left";
        this.pad = 0;
    }
    fill() {
        return this._fill;
    }
    set_fill(fill) {
        this._fill = fill;
    }
    layout(g, real_available) {
        let available = real_available.shrink(this.pad);
        let yes_flex = this.get_children().filter((ch)=>ch.vflex());
        let non_flex = this.get_children().filter((ch)=>!ch.vflex());
        //call layout on the non-flex children first
        let total_h = 0;
        let leftover_h = available.h;
        non_flex.map((ch)=>{
            let size = ch.layout(g, new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(available.w, leftover_h));
            total_h += size.h;
            leftover_h -= size.h;
        });
        if (yes_flex.length > 0) {
            //allocate the rest of the space equally to the flex children
            let flex_avail = new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(available.w, (available.h - total_h) / yes_flex.length);
            //call layout on the flex children
            yes_flex.map((ch)=>{
                let size = ch.layout(g, flex_avail);
                total_h += size.h;
            });
        }
        //place all children (they've already set their width and height)
        let nx = this.pad;
        let ny = this.pad;
        let maxw = 0;
        this.get_children().forEach((ch)=>maxw = Math.max(ch.size().w, maxw));
        this.get_children().forEach((ch)=>{
            if (this.halign === "left") ch.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(nx, ny));
            if (this.halign === "center") ch.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)((maxw - ch.size().w) / 2, ny));
            if (this.halign === "right") ch.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(maxw - ch.size().w, ny));
            if (this.halign === "stretch") {
                ch.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(nx, ny));
                ch.size().w = maxw;
            }
            ny += ch.size().h;
        });
        //return own size
        this.size().w = maxw + this.pad * 2;
        this.size().h = ny + this.pad * 2;
        if (this.hflex()) this.size().w = available.w;
        if (this.vflex()) this.size().h = available.h;
        return this.size();
    }
    draw(g) {
        if (this._fill) g.fillBackgroundSize(this.size(), this._fill);
    }
    clear_children() {
        this._children = [];
    }
}
class $7a0175d4f0ca63f6$export$6f2cdf4b4a19686b extends (0, $8a29e9b0d3dc349c$export$13bdd94145ae928f) {
    constructor(){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("grow"));
        this.fill = null;
        this._hflex = true;
        this._vflex = true;
    }
    layout(g, available) {
        this.set_size(available);
        return this.size();
    }
    draw(g) {
        if (this.fill) g.fillBackgroundSize(this.size(), this.fill);
    }
    set_fill(fill) {
        this.fill = fill;
    }
    with_fill(fill) {
        this.fill = fill;
        return this;
    }
}
class $7a0175d4f0ca63f6$var$ScrollWrapper extends (0, $8a29e9b0d3dc349c$export$13bdd94145ae928f) {
    constructor(){
        super("scroll-wrapper");
        this.xoff = 0;
        this.yoff = 0;
        this._name = "scroll-wrapper";
    }
    clip_children() {
        return true;
    }
    layout(g, available) {
        if (this.yoff > 0) this.yoff = 0;
        if (this.xoff > 0) this.xoff = 0;
        this.set_size(available);
        this.get_children().forEach((ch)=>{
            let size = ch.layout(g, available);
            if (size.w + this.xoff < available.w) this.xoff = available.w - size.w;
            if (size.h + this.yoff < available.h) this.yoff = available.h - size.h;
            if (size.w < available.w) this.xoff = (available.w - size.w) / 2;
            if (size.h < available.h) this.yoff = (available.h - size.h) / 2;
            ch.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(this.xoff, this.yoff));
        });
        return available;
    }
    input(event) {
        if (event.type === (0, $8a29e9b0d3dc349c$export$ff567485663629e4) && event.direction === "up") {
            let e = event;
            this.xoff -= e.delta.x;
            this.yoff -= e.delta.y;
            e.stopped = true;
            e.ctx.repaint();
        }
    }
}
class $7a0175d4f0ca63f6$var$ScrollBar extends (0, $8a29e9b0d3dc349c$export$920f40dd82baec9f) {
    constructor(vert, wrapper){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("scroll-bar"));
        this.wrapper = wrapper;
        this.vert = vert;
        if (this.vert) this.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(20, 100));
        else this.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(100, 20));
    }
    draw(g) {
        //draw the gutter
        g.fillBackgroundSize(this.size(), "#888");
        //draw the thumb
        if (this.wrapper.get_children().length == 1) {
            let viewport_size = this.wrapper.size();
            let content_size = this.wrapper.get_children()[0].size();
            // this.log("content",content,'vs',wsize)
            if (this.vert) {
                let gutter_length = this.size().h - 40;
                let fract = viewport_size.h / content_size.h;
                let s = gutter_length * fract;
                let thumb_off = this.wrapper.yoff * fract;
                g.fill(new (0, $8a29e9b0d3dc349c$export$c79fc6492f3af13d)(0, 20 - thumb_off, 20, s), "#ccc");
            } else {
                let gutter_length = this.size().w - 50;
                let fract = viewport_size.w / content_size.w;
                let s = gutter_length * fract;
                let thumb_off = this.wrapper.xoff * fract;
                g.fill(new (0, $8a29e9b0d3dc349c$export$c79fc6492f3af13d)(20 - thumb_off, 0, s, 20), "#ccc");
            }
        }
        //draw the arrows
        if (this.vert) {
            g.fill(new (0, $8a29e9b0d3dc349c$export$c79fc6492f3af13d)(0, 0, 20, 20), "#999");
            g.draw_glyph(8593, 0, 0, "base", "black", 1);
            g.fill(new (0, $8a29e9b0d3dc349c$export$c79fc6492f3af13d)(0, this.size().h - 20, 20, 20), "#999");
            g.draw_glyph(8595, 0, this.size().h - 20, "base", "black", 1);
        } else {
            g.fill(new (0, $8a29e9b0d3dc349c$export$c79fc6492f3af13d)(0, 0, 20, 20), "#999");
            g.draw_glyph(8592, 0, 0, "base", "black", 1);
            g.fill(new (0, $8a29e9b0d3dc349c$export$c79fc6492f3af13d)(this.size().w - 20, 0, 20, 20), "#999");
            g.draw_glyph(8594, this.size().w - 20, 0, "base", "black", 1);
        }
    }
    input(e) {
        if (e.category !== (0, $8a29e9b0d3dc349c$export$9d2b52010bf6ce34)) return;
        let event = e;
        if (event.type === (0, $8a29e9b0d3dc349c$export$1b45e8fa340ec4b9)) {
            if (this.vert) {
                if (event.position.y < 20) this.wrapper.yoff += 20;
                if (event.position.y > this.size().h - 20) this.wrapper.yoff -= 20;
            } else {
                if (event.position.x < 20) this.wrapper.xoff += 20;
                if (event.position.x > this.size().w - 20) this.wrapper.xoff -= 20;
            }
        }
        if (event.type === (0, $8a29e9b0d3dc349c$export$bf9b45a2f73f134)) {
            let viewport_size = this.wrapper.size();
            let content_size = this.wrapper.get_children()[0].size();
            if (this.vert) {
                let fract = viewport_size.h / content_size.h;
                this.wrapper.yoff -= event.delta.y / fract;
            } else {
                let fract = viewport_size.w / content_size.w;
                this.wrapper.xoff -= event.delta.x / fract;
            }
            event.ctx.repaint();
        }
        if (event.type === "wheel") {
            let viewport_size = this.wrapper.size();
            let content_size = this.wrapper.get_children()[0].size();
            if (this.vert) {
                let fract = viewport_size.h / content_size.h;
                this.wrapper.yoff -= event.delta.y / fract;
            } else {
                let fract = viewport_size.w / content_size.w;
                this.wrapper.xoff -= event.delta.x / fract;
            }
            event.ctx.repaint();
        }
    }
    layout(g, available) {
        return this.size();
    }
}
class $7a0175d4f0ca63f6$export$5665e3d6be6adea extends (0, $8a29e9b0d3dc349c$export$13bdd94145ae928f) {
    constructor(){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("scroll-view"));
        this._name = "scroll-view";
        this._pref_width = 300;
        this.wrapper = new $7a0175d4f0ca63f6$var$ScrollWrapper();
        this.add(this.wrapper);
        this.hbar = new $7a0175d4f0ca63f6$var$ScrollBar(false, this.wrapper);
        // @ts-ignore
        this.hbar._name = "h-scroll-bar";
        this.add(this.hbar);
        this.vbar = new $7a0175d4f0ca63f6$var$ScrollBar(true, this.wrapper);
        // @ts-ignore
        this.vbar._name = "v-scroll-bar";
        this.add(this.vbar);
    }
    draw(g) {
        g.fillBackgroundSize(this.size(), "#aaa");
    }
    set_pref_width(num) {
        this._pref_width = num;
    }
    layout(g, available) {
        this.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(this._pref_width, 300));
        if (this.hflex()) this.size().w = available.w;
        if (this.vflex()) this.size().h = available.h;
        let ws = this.size().shrink(10);
        this.get_children().forEach((ch)=>{
            if (ch == this.wrapper) ch.layout(g, ws);
            else ch.layout(g, available);
        });
        this.hbar.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(this.size().w - 20, 20));
        this.hbar.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(0, this.size().h - this.hbar.size().h));
        this.vbar.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(20, this.size().h - 20));
        this.vbar.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(this.size().w - this.vbar.size().w, 0));
        return this.size();
    }
    set_content(view) {
        this.content = view;
        this.wrapper.add(view);
    }
}
class $7a0175d4f0ca63f6$export$cca08eed9de89ba9 extends (0, $8a29e9b0d3dc349c$export$13bdd94145ae928f) {
    constructor(){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("popupcontainer"));
        this._name = "popup_container";
    }
    draw(g) {
        g.fillBackgroundSize(this.size(), "gray");
    }
    layout(g, available) {
        let box = this._children[0];
        let size = box.layout(g, new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(1000, 1000));
        this.set_size(size);
        return new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(size.w, size.h);
    }
    open_at(position) {
        this.set_position(position);
    }
    hide() {
        this._visible = false;
        console.log("hiding", this._visible);
    }
}
class $7a0175d4f0ca63f6$export$3f2861baa75f4ff5 extends $7a0175d4f0ca63f6$export$aa949f9e1540fee1 {
    constructor(){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("popup-layer"));
        this._name = "popup-layer";
    }
    draw(g) {
        if (this._children.length > 0) g.fillBackgroundSize(this.size(), "rgba(255,255,255,0.7)");
    }
    input(event) {
        if (event.type === (0, $8a29e9b0d3dc349c$export$1b45e8fa340ec4b9)) {
            this._children = [];
            event.stopped = true;
        }
    }
    can_receive_mouse() {
        if (this.get_children().length > 0) return true;
        return false;
    }
}
class $7a0175d4f0ca63f6$export$9272eaa8a91f79dc extends $7a0175d4f0ca63f6$export$aa949f9e1540fee1 {
    constructor(){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("dialog-layer"));
        this._name = "dialog-layer";
    }
    draw(g) {
        if (this._children.length > 0) g.fillBackgroundSize(this.size(), "rgba(255,255,255,0.7)");
    }
}
class $7a0175d4f0ca63f6$export$547754aada6e339f extends (0, $8a29e9b0d3dc349c$export$13bdd94145ae928f) {
    constructor(){
        super("dialog-container");
        this._name = "dialog-container";
        this.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(250, 250));
    }
    draw(g) {
        g.fillBackgroundSize(this.size(), "gray");
    }
    layout(g, available) {
        let box = this._children[0];
        let size = box.layout(g, this.size()) //new Size(600, 600))
        ;
        // this.set_size(size)
        this.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)((g.size().w - size.w) / 2, (g.size().h - size.h) / 2));
        return new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(size.w, size.h);
    }
}
class $7a0175d4f0ca63f6$export$59fd15e59ca9b1e0 extends $7a0175d4f0ca63f6$export$aa949f9e1540fee1 {
    constructor(main_view){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("keystroke_capture_view"));
        this._name = "keystroke-capture-view";
        this.add(main_view);
    }
    input(event) {
        if (event.category === (0, $8a29e9b0d3dc349c$export$9ea12e6597684af)) {
            let kb = event;
            // this.log("got kb", kb)
            if (kb.key === "s" && kb.modifiers.meta === true) {
                // console.log("intercepting save")
                // @ts-ignore
                event.domEvent.preventDefault();
                kb.stopped = true;
            }
            kb.key === "d" && kb.modifiers.meta === true && kb.modifiers.ctrl;
        }
        super.input(event);
    }
}


class $13755f3aa883028b$export$b04be29aa201d4f5 extends (0, $8a29e9b0d3dc349c$export$920f40dd82baec9f) {
    constructor(caption){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("label"));
        this._name = "label";
        this._caption = caption || "no caption";
    }
    caption() {
        return this._caption;
    }
    set_caption(caption) {
        this._caption = caption;
    }
    draw(g) {
        g.fillStandardText(this._caption, (0, $d9cc962363f968ed$export$bc1d2e14213c9578), (0, $d9cc962363f968ed$export$63eec52eb5416473), "base");
    }
    layout(g, available) {
        this.set_size(g.measureText(this._caption, "base").grow((0, $d9cc962363f968ed$export$bc1d2e14213c9578)));
        return this.size();
    }
}
class $13755f3aa883028b$export$6d2887785673b206 extends $13755f3aa883028b$export$b04be29aa201d4f5 {
    constructor(text, cb){
        super(text);
        this.cb = cb;
    }
    draw(ctx) {
        this._caption = this.cb({});
        super.draw(ctx);
    }
}
class $13755f3aa883028b$export$cfc7921d29ef7b80 extends (0, $8a29e9b0d3dc349c$export$920f40dd82baec9f) {
    constructor(props){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("button2"));
        this._name = "button2";
        this.caption = "no caption";
        if (props && props.caption) this.caption = props.caption;
        this.active = false;
    }
    set_caption(caption) {
        this.caption = caption;
    }
    draw(g) {
        if (this.active) g.fillBackgroundSize(this.size(), (0, $d9cc962363f968ed$export$e22171881e21e37d));
        else g.fillBackgroundSize(this.size(), (0, $d9cc962363f968ed$export$4b96206d0506e47f));
        g.strokeBackgroundSize(this.size(), (0, $d9cc962363f968ed$export$addd948fb18d2d08));
        g.fillStandardText(this.caption, (0, $d9cc962363f968ed$export$bc1d2e14213c9578), (0, $d9cc962363f968ed$export$63eec52eb5416473), "base");
    }
    input(event) {
        if (event.category !== (0, $8a29e9b0d3dc349c$export$9d2b52010bf6ce34)) return;
        if (event.type === (0, $8a29e9b0d3dc349c$export$1b45e8fa340ec4b9)) this.active = true;
        if (event.type === (0, $8a29e9b0d3dc349c$export$325fffb5a0fb0686)) {
            this.active = false;
            let ae = new (0, $8a29e9b0d3dc349c$export$4321e05f6706c18d)(event.ctx, (0, $8a29e9b0d3dc349c$export$d7d7f0f0e8a54cf8), this);
            this.fire(ae.type, ae);
        }
    }
    layout(g, available) {
        this.set_size(g.measureText(this.caption, "base").grow((0, $d9cc962363f968ed$export$bc1d2e14213c9578)));
        return this.size();
    }
}
class $13755f3aa883028b$export$62bbe4e48c45d049 extends (0, $8a29e9b0d3dc349c$export$920f40dd82baec9f) {
    constructor(){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("base-button"));
        this._caption = "no caption";
        this._selected = false;
        this.icon = -1;
        this.selected_icon = -1;
        this._active = false;
    }
    selected() {
        return this._selected;
    }
    set_selected(sel) {
        this._selected = sel;
    }
    caption() {
        return this._caption;
    }
    set_caption(caption) {
        this._caption = caption;
    }
    draw(g) {
        let x = (0, $d9cc962363f968ed$export$bc1d2e14213c9578);
        let y = (0, $d9cc962363f968ed$export$bc1d2e14213c9578);
        if (this.has_icon()) {
            g.draw_glyph(this._selected ? this.selected_icon : this.icon, x, y, "base", "black");
            x += 16 // glyph width
            ;
            x += (0, $d9cc962363f968ed$export$bc1d2e14213c9578 // space between text and glyph
            );
        }
        g.fillStandardText(this._caption, x, y + (0, $d9cc962363f968ed$export$63eec52eb5416473) - 2, "base");
    }
    input(event) {
        if (event.type === (0, $8a29e9b0d3dc349c$export$1b45e8fa340ec4b9)) this._active = true;
        if (event.type === (0, $8a29e9b0d3dc349c$export$325fffb5a0fb0686)) {
            this._active = false;
            this._selected = !this._selected;
            let ae = new (0, $8a29e9b0d3dc349c$export$4321e05f6706c18d)(event.ctx, (0, $8a29e9b0d3dc349c$export$9e79ac99d4b68a26), this);
            this.fire(ae.type, ae);
        }
    }
    layout(g, available) {
        let size = g.measureText(this._caption, "base").grow((0, $d9cc962363f968ed$export$bc1d2e14213c9578));
        if (this.has_icon()) size.w += 16;
        size.w += (0, $d9cc962363f968ed$export$bc1d2e14213c9578 // gap between icon and texst
        );
        this.set_size(size);
        return size;
    }
    has_icon() {
        return this.icon !== -1;
    }
}
class $13755f3aa883028b$export$d2b052e7b4be1756 extends $13755f3aa883028b$export$62bbe4e48c45d049 {
    // private active: boolean
    constructor(caption){
        super();
        if (caption) this.set_caption(caption);
    }
    draw(ctx) {
        let bg = (0, $d9cc962363f968ed$export$4b96206d0506e47f);
        if (this.selected()) bg = (0, $d9cc962363f968ed$export$d78081c6bf0643b7);
        if (this._active) bg = (0, $d9cc962363f968ed$export$e22171881e21e37d);
        ctx.fillBackgroundSize(this.size(), bg);
        ctx.strokeBackgroundSize(this.size(), (0, $d9cc962363f968ed$export$addd948fb18d2d08));
        super.draw(ctx);
    }
}
class $13755f3aa883028b$export$c767f14fef25f1ed extends $13755f3aa883028b$export$62bbe4e48c45d049 {
    constructor(){
        super();
        this.icon = 800;
        this.selected_icon = 801;
    }
}
class $13755f3aa883028b$export$f4422ae58352e179 extends $13755f3aa883028b$export$62bbe4e48c45d049 {
    constructor(){
        super();
        this.icon = 802;
        this.selected_icon = 803;
    }
}
class $13755f3aa883028b$export$c25acd513dcc8062 extends (0, $8a29e9b0d3dc349c$export$920f40dd82baec9f) {
    constructor(){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("glyph-button"));
        this._name = "glyph-button";
        this.active = false;
        this._icon = 0;
    }
    draw(g) {
        if (this.active) g.fillBackgroundSize(this.size(), (0, $d9cc962363f968ed$export$e22171881e21e37d));
        else g.fillBackgroundSize(this.size(), (0, $d9cc962363f968ed$export$4b96206d0506e47f));
        g.strokeBackgroundSize(this.size(), (0, $d9cc962363f968ed$export$addd948fb18d2d08));
        if (this._icon !== 0) {
            let x = (0, $d9cc962363f968ed$export$bc1d2e14213c9578);
            let y = (0, $d9cc962363f968ed$export$bc1d2e14213c9578);
            g.draw_glyph(this._icon, x, y, "base", "black");
        }
    }
    input(event) {
        if (event.category !== (0, $8a29e9b0d3dc349c$export$9d2b52010bf6ce34)) return;
        if (event.type === (0, $8a29e9b0d3dc349c$export$1b45e8fa340ec4b9)) this.active = true;
        if (event.type === (0, $8a29e9b0d3dc349c$export$325fffb5a0fb0686)) {
            this.active = false;
            let ae = new (0, $8a29e9b0d3dc349c$export$4321e05f6706c18d)(event.ctx, (0, $8a29e9b0d3dc349c$export$d7d7f0f0e8a54cf8), this);
            this.fire(ae.type, ae);
        }
    }
    layout(g, available) {
        this.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(16, 16).grow((0, $d9cc962363f968ed$export$bc1d2e14213c9578)));
        return this.size();
    }
    icon() {
        return this._icon;
    }
    set_icon(icon) {
        this._icon = icon;
    }
}
class $13755f3aa883028b$export$ed433d8050015de5 extends (0, $8a29e9b0d3dc349c$export$920f40dd82baec9f) {
    constructor(data, renderer){
        super("tree");
        this.data = data;
        this.renderer = renderer;
        this.selected_index = -1;
        this._vflex = true;
    }
    draw(g) {
        g.fillBackgroundSize(this.size(), "#ddd");
        this.data.forEach((item, i)=>{
            if (i === this.selected_index) g.fill(new (0, $8a29e9b0d3dc349c$export$c79fc6492f3af13d)(0, 30 * i, this.size().w, 25), (0, $d9cc962363f968ed$export$165f1f1fad5fbec5));
            let str = this.renderer(item);
            g.fillStandardText(str, (0, $d9cc962363f968ed$export$bc1d2e14213c9578), i * 30 + 20, "base");
        });
    }
    input(event) {
        if (event.category !== (0, $8a29e9b0d3dc349c$export$9d2b52010bf6ce34)) return;
        if (event.type === (0, $8a29e9b0d3dc349c$export$1b45e8fa340ec4b9)) {
            let evt = event;
            let pt = evt.position;
            let y = Math.floor(pt.y / 30);
            let item = this.data[y];
            this.selected_index = y;
            this.fire("change", {
                item: item,
                y: y
            });
        }
    }
    set_data(data) {
        this.data = data;
    }
    layout(g, available) {
        if (this.hflex()) this.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(available.w, available.h));
        else this.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(200, available.h));
        return this.size();
    }
}
class $13755f3aa883028b$export$8b251419efc915eb extends (0, $8a29e9b0d3dc349c$export$920f40dd82baec9f) {
    constructor(caption){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("header"));
        this._name = "header";
        this.fill = "white";
        this._caption = caption || "no caption";
        this._hflex = true;
    }
    caption() {
        return this._caption;
    }
    set_caption(caption) {
        this._caption = caption;
    }
    draw(g) {
        g.fillBackgroundSize(this.size(), this.fill);
        let size = g.measureText(this._caption, "base");
        let x = (this.size().w - size.w) / 2;
        g.fillStandardText(this._caption, x, (0, $d9cc962363f968ed$export$63eec52eb5416473), "base");
    }
    layout(g, available) {
        let text_size = g.measureText(this._caption, "base").grow((0, $d9cc962363f968ed$export$bc1d2e14213c9578));
        this.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(available.w, text_size.h));
        return this.size();
    }
}
class $13755f3aa883028b$export$ba8fe6b2d373b3a3 extends (0, $8a29e9b0d3dc349c$export$920f40dd82baec9f) {
    constructor(){
        super("h-spacer");
        this._hflex = true;
        this._name = "h-spacer";
    }
    layout(g, available) {
        this.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(available.w, 0));
        return this.size();
    }
    draw(g) {}
}
class $13755f3aa883028b$export$f56ea46797033f60 extends (0, $8a29e9b0d3dc349c$export$920f40dd82baec9f) {
    constructor(codepoint){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("fonticon"));
        this.codepoint = codepoint;
    }
    draw(g) {
        g.draw_glyph(this.codepoint, 0, 0, "base", "black");
    }
    layout(g, available) {
        this.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(16, 16));
        return this.size();
    }
}
class $13755f3aa883028b$export$181f40ec41159e56 extends $13755f3aa883028b$export$cfc7921d29ef7b80 {
    constructor(){
        super();
        this.actions = [];
        this.on("action", (e)=>{
            let popup = new (0, $7a0175d4f0ca63f6$export$cca08eed9de89ba9)();
            let popup_box = new (0, $7a0175d4f0ca63f6$export$c1b74fc959ecff8e)();
            popup_box.set_vflex(false);
            this.actions.forEach((act)=>{
                let button = new $13755f3aa883028b$export$cfc7921d29ef7b80(act.caption);
                button.set_caption(act.caption);
                button.on("action", ()=>{
                    // @ts-ignore
                    act.fun();
                    popup.hide();
                });
                popup_box.add(button);
            });
            popup.add(popup_box);
            let popup_layer = e.ctx.find_by_name("popup-layer");
            popup_layer.add(popup);
            let off = e.ctx.view_to_local(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(0, 0), this);
            popup.open_at(off.add(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(0, this.size().h)));
        });
    }
    set_actions(actions) {
        this.actions = actions;
    }
}
class $13755f3aa883028b$export$4377c71588c2474b extends (0, $8a29e9b0d3dc349c$export$920f40dd82baec9f) {
    constructor(){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("text-line"));
        this._name = "@text-line";
        this.text = "abc";
        this.pref_width = 100;
        this.cursor = this.text.length;
    }
    draw(g) {
        let bg = "#ddd";
        if (g.is_keyboard_focus(this)) bg = "white";
        g.fillBackgroundSize(this.size(), bg);
        g.strokeBackgroundSize(this.size(), "black");
        if (g.is_keyboard_focus(this)) {
            // @ts-ignore
            g.ctx.fillStyle = (0, $d9cc962363f968ed$export$9b5aefa8b8f9f54);
            // @ts-ignore
            g.ctx.font = (0, $d9cc962363f968ed$export$9f53be77959c9e4);
            let parts = this._parts();
            let bx = 5;
            let ax = bx + g.measureText(parts.before, "base").w;
            g.fillStandardText(parts.before, bx, 20, "base");
            g.fillStandardText(parts.after, ax, 20, "base");
            // @ts-ignore
            g.ctx.fillStyle = "black";
            // @ts-ignore
            g.ctx.fillRect(ax, 2, 2, 20);
        } else g.fillStandardText(this.text, 5, 20, "base");
    }
    input(event) {
        event.category;
        if (event.type === (0, $8a29e9b0d3dc349c$export$1b45e8fa340ec4b9)) event.ctx.set_keyboard_focus(this);
        if (event.type === (0, $8a29e9b0d3dc349c$export$2f782da1dcec9699)) {
            let e = event;
            if (e.code === "KeyD" && e.modifiers.ctrl) return this.delete_right();
            if (e.code === "Backspace") return this.delete_left();
            if (e.code === "ArrowLeft") return this.cursor_left();
            if (e.code === "ArrowRight") return this.cursor_right();
            if (e.code === "Enter") {
                event.ctx.release_keyboard_focus(this);
                this.fire("action", this.text);
                return;
            }
            if (e.key && e.key.length === 1) this.insert(e.key);
        }
    }
    layout(g, available) {
        this.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(this.pref_width, 26));
        if (this._hflex) this.size().w = available.w;
        return this.size();
    }
    insert(key) {
        let parts = this._parts();
        this.text = `${parts.before}${key}${parts.after}`;
        this.cursor_right();
        this.fire("change", this.text);
    }
    delete_left() {
        let parts = this._parts();
        this.text = `${parts.before.slice(0, parts.before.length - 1)}${parts.after}`;
        this.cursor_left();
        this.fire("change", this.text);
    }
    delete_right() {
        let parts = this._parts();
        this.text = `${parts.before}${parts.after.slice(1)}`;
        this.fire("change", this.text);
    }
    cursor_left() {
        this.cursor -= 1;
        if (this.cursor < 0) this.cursor = 0;
    }
    cursor_right() {
        this.cursor += 1;
        if (this.cursor > this.text.length) this.cursor = this.text.length;
    }
    _parts() {
        return {
            before: this.text.slice(0, this.cursor),
            after: this.text.slice(this.cursor)
        };
    }
    set_text(name) {
        this.text = name;
        this.cursor = this.text.length;
        this.fire("change", this.text);
    }
    set_pref_width(w) {
        this.pref_width = w;
    }
}
class $13755f3aa883028b$export$c925c7a625b1377e extends (0, $7a0175d4f0ca63f6$export$e2a0406e25a673da) {
    constructor(){
        super();
        this.pad = 1;
        this._value = 0;
        this.text_line = new $13755f3aa883028b$export$4377c71588c2474b();
        this.add(this.text_line);
        this.text_line.on("change", ()=>{
            let v = parseInt(this.text_line.text, 10);
            if (Number.isInteger(v)) this._value = v;
            else this.log("invalid!");
        });
        this.up_button = new $13755f3aa883028b$export$c25acd513dcc8062();
        this.up_button.set_icon(8593);
        this.up_button.on("action", ()=>{
            this.set_value(this.value() + 1);
        });
        this.down_button = new $13755f3aa883028b$export$c25acd513dcc8062();
        this.down_button.set_icon(8595);
        this.down_button.on("action", ()=>{
            this.set_value(this.value() - 1);
        });
        this.add(this.up_button);
        this.add(this.down_button);
    }
    draw(g) {
        super.draw(g);
        if (!this.is_valid()) g.strokeBackgroundSize(this.size(), "red");
    }
    set_value(value) {
        this._value = value;
        this.text_line.set_text("" + value);
    }
    is_valid() {
        let v = parseInt(this.text_line.text);
        return Number.isInteger(v);
    }
    value() {
        return this._value;
    }
}



var $8d3684abd246c89e$exports = {};

$parcel$export($8d3684abd246c89e$exports, "randi", () => $8d3684abd246c89e$export$befe6f566a24ebc);
function $8d3684abd246c89e$export$befe6f566a24ebc(min, max) {
    return Math.floor(min + Math.random() * (max - min));
}



var $e7d69bb808fab13a$exports = {};

$parcel$export($e7d69bb808fab13a$exports, "DebugLensGlass", () => $e7d69bb808fab13a$export$24804c1f95a85d60);
$parcel$export($e7d69bb808fab13a$exports, "ResizeHandle", () => $e7d69bb808fab13a$export$33f2411a0ad35be7);
$parcel$export($e7d69bb808fab13a$exports, "DebugLens", () => $e7d69bb808fab13a$export$f4a8e48567e40fad);
$parcel$export($e7d69bb808fab13a$exports, "DebugLayer", () => $e7d69bb808fab13a$export$a3a55c500f36819a);




class $e7d69bb808fab13a$export$24804c1f95a85d60 extends (0, $8a29e9b0d3dc349c$export$920f40dd82baec9f) {
    constructor(p, size){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("debug-glass"));
        this.lens = p;
        this._name = "debug-lens-glass";
        this.set_size(size);
    }
    layout(g, available) {
        return this.size();
    }
    draw(g) {
        let root = g.root();
        g.ctx.save();
        g.ctx.beginPath();
        let size = this.size();
        g.ctx.rect(0, 0, size.w, size.h);
        g.ctx.clip();
        let trans = g.view_to_local(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(0, 0), this);
        g.ctx.translate(-trans.x, -trans.y);
        this.draw_outline(g, root);
        this.draw_selected(g);
        g.ctx.restore();
    }
    draw_outline(g1, view1) {
        if (view1.name() === "debug-layer") return;
        let pos1 = view1.position();
        let size = view1.size();
        g1.ctx.save();
        if (this.draw_bounds) {
            g1.ctx.strokeStyle = "black";
            g1.ctx.lineWidth = 1;
            for(let s = 1; s < 4; s++){
                g1.ctx.strokeStyle = s % 2 == 0 ? "red" : "black";
                g1.ctx.beginPath();
                g1.ctx.rect(pos1.x + s, pos1.y + s, size.w - s * 2, size.h - s * 2);
                g1.ctx.stroke();
            }
        }
        function draw_debug_text(g, pos, text) {
            let metrics = g.measureText(text, "base");
            g.ctx.save();
            g.ctx.translate(pos.x, pos.y);
            g.ctx.fillStyle = "white";
            g.ctx.fillRect(0, 0, metrics.w + 4, 18);
            g.ctx.strokeStyle = "black";
            g.ctx.lineWidth = 1;
            g.ctx.strokeRect(0, 0, metrics.w + 4, 18);
            g.ctx.fillStyle = "black";
            g.fillStandardText(text, 4, 18, "base");
            g.ctx.restore();
        }
        if (this._draw_names) draw_debug_text(g1, pos1.add(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(5, 5)), view1.name());
        if (this.draw_sizes) {
            let size = view1.size();
            let text = `${size.w.toFixed(1)} x ${size.h.toFixed(1)}`;
            draw_debug_text(g1, pos1.add(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(5, 25)), text);
        }
        if (this.draw_flex) {
            let text = `hflex=${view1.hflex()} vflex=${view1.vflex()}`;
            draw_debug_text(g1, pos1.add(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(5, 35)), text);
        }
        if (this.draw_align) {
            if ("halign" in view1) {
                // @ts-ignore
                let text = `halign=${view1.halign}`;
                draw_debug_text(g1, pos1.add(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(5, 45)), text);
            }
            if ("valign" in view1) {
                // @ts-ignore
                let text = `valign=${view1.valign}`;
                draw_debug_text(g1, pos1.add(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(5, 45)), text);
            }
        }
        function is_parent(view) {
            // @ts-ignore
            return view.is_parent_view && view.is_parent_view();
        }
        function as_parent(view) {
            return view;
        }
        if (is_parent(view1)) {
            let parent = as_parent(view1);
            g1.ctx.save();
            g1.ctx.translate(pos1.x, pos1.y);
            parent.get_children().forEach((ch)=>{
                this.draw_outline(g1, ch);
            });
            g1.ctx.restore();
        }
        g1.ctx.restore();
    }
    draw_names() {
        return this._draw_names;
    }
    set_draw_names(selected) {
        this._draw_names = selected;
    }
    set_draw_sizes(selected) {
        this.draw_sizes = selected;
    }
    set_draw_bounds(selected) {
        this.draw_bounds = selected;
    }
    set_draw_flex(selected) {
        this.draw_flex = selected;
    }
    set_draw_align(selected) {
        this.draw_align = selected;
    }
    input(event) {
        // this.log(event)
        if (event.type === (0, $8a29e9b0d3dc349c$export$1b45e8fa340ec4b9)) {
            let p = event;
            let p2 = event.ctx.view_to_local(p.position, this);
            this.log("global", p2);
            let views = [];
            let should_recurse = (view)=>{
                if (!view.visible()) return false;
                if (view.name() === "debug-layer") return false;
                if (view.name() === "debug-lens") return false;
                return true;
            };
            let should_include = (view)=>{
                if (view.name() === "dialog-layer") return false;
                if (view.name() === "debug-layer") return false;
                if (view.name() === "popup-layer") return false;
                if (view.name() === "debug-lens") return false;
                if (view.name() === "debug-lens-glass") return false;
                return true;
            };
            this.pick_under_cursor(event.ctx.root(), p2, views, should_recurse, should_include);
            this.log("path is", views);
            this.lens.set_selected(views[views.length - 1]);
        }
    }
    pick_under_cursor(view, cursor, views, should_recurse, should_include) {
        if (!should_recurse(view)) return;
        if (view.size().contains(cursor) && should_include(view)) views.push(view);
        // @ts-ignore
        if (view.is_parent_view && view.is_parent_view()) {
            let parent = view;
            // this.log("going into parent",view.name())
            let chs = parent.get_children();
            chs.forEach((ch)=>{
                this.pick_under_cursor(ch, cursor.subtract(ch.position()), views, should_recurse, should_include);
            });
        }
    }
    draw_selected(g) {
        if (!this.lens._selected) return;
        let trans = g.view_to_local(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(0, 0), this.lens._selected);
        // this.log("trans",trans)
        // this.log("selected is", this._selected.name())
        // let me_trans = g.view_to_local(new Point(0,0,),this)
        // this.log("me_trans = ", me_trans)
        let rect = (0, $c5e8e0cfa8a822f8$export$e8c1e4de1c401d98)(trans, this.lens._selected.size());
        g.stroke(rect, "red");
    }
}
class $e7d69bb808fab13a$export$33f2411a0ad35be7 extends (0, $8a29e9b0d3dc349c$export$920f40dd82baec9f) {
    constructor(lens){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("debug-lens-resize"));
        this._name = "debug-lens-resize-handle";
        this.lens = lens;
        this.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(20, 20));
    }
    input(event) {
        if (event.category === (0, $8a29e9b0d3dc349c$export$9d2b52010bf6ce34)) {
            let pt = event;
            if (event.type === (0, $8a29e9b0d3dc349c$export$bf9b45a2f73f134)) this.lens.set_size(this.lens.size().add(pt.delta));
            event.stopped = true;
            event.ctx.repaint();
        }
    }
    draw(g) {
        g.fillBackgroundSize(this.size(), "#888");
        g.draw_glyph(2921, 2, 0, "base", "black");
    }
    layout(g, available) {
        return this.size();
    }
}
class $e7d69bb808fab13a$var$DebugPropSheet extends (0, $8a29e9b0d3dc349c$export$13bdd94145ae928f) {
    constructor(lens){
        super("debug-prop-sheet");
        this.lens = lens;
        this.lens.on("select", ()=>this.rebuild());
        this.vbox = new (0, $7a0175d4f0ca63f6$export$c1b74fc959ecff8e)();
        this.add(this.vbox);
    }
    draw(g) {
        g.fillBackgroundSize(this.size(), "white");
    }
    layout(g, available) {
        this.get_children().forEach((ch)=>{
            ch.layout(g, available);
        });
        this.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(this.vbox.size().w, this.vbox.size().h));
        return this.size();
    }
    rebuild() {
        let sel = this.lens._selected;
        this.log("rebuilding prop sheet for ", sel);
        this.vbox.clear_children();
        this.vbox.add(new (0, $13755f3aa883028b$export$b04be29aa201d4f5)("id"));
        // @ts-ignore
        this.vbox.add(new (0, $13755f3aa883028b$export$b04be29aa201d4f5)(sel.id));
        this.vbox.add(new (0, $13755f3aa883028b$export$b04be29aa201d4f5)("name"));
        this.vbox.add(new (0, $13755f3aa883028b$export$b04be29aa201d4f5)(sel.name()));
        this.vbox.add(new (0, $13755f3aa883028b$export$b04be29aa201d4f5)(`hflex: ${sel.hflex()}`));
        this.vbox.add(new (0, $13755f3aa883028b$export$b04be29aa201d4f5)(`vflex: ${sel.vflex()}`));
        this.vbox.add(new (0, $13755f3aa883028b$export$b04be29aa201d4f5)(`size: ${sel.size().toString()}`));
    }
}
class $e7d69bb808fab13a$export$f4a8e48567e40fad extends (0, $8a29e9b0d3dc349c$export$13bdd94145ae928f) {
    constructor(){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("debug-lens"));
        this._name = "debug-lens";
        this.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(400, 300));
        let vbox = new (0, $7a0175d4f0ca63f6$export$c1b74fc959ecff8e)();
        vbox.set_name("debug-lens-vbox");
        vbox.halign = "left";
        this.vbox = vbox;
        this.sidebar_right = false;
        this.sidebar_width = 200;
        vbox.add((0, $8a29e9b0d3dc349c$export$48697f005c434be7)(new (0, $13755f3aa883028b$export$d2b052e7b4be1756)("right"), (e)=>this.sidebar_right = !this.sidebar_right));
        vbox.add((0, $8a29e9b0d3dc349c$export$48697f005c434be7)(new (0, $13755f3aa883028b$export$d2b052e7b4be1756)("names"), (e)=>this.glass.set_draw_names(e.target.selected)));
        vbox.add((0, $8a29e9b0d3dc349c$export$48697f005c434be7)(new (0, $13755f3aa883028b$export$d2b052e7b4be1756)("bounds"), (e)=>this.glass.set_draw_bounds(e.target.selected)));
        this.propsheet = new $e7d69bb808fab13a$var$DebugPropSheet(this);
        vbox.add(this.propsheet);
        this.add(vbox);
        this.glass = new $e7d69bb808fab13a$export$24804c1f95a85d60(this, this.size());
        this.add(this.glass);
        this.resize_handle = new $e7d69bb808fab13a$export$33f2411a0ad35be7(this);
        this.add(this.resize_handle);
    }
    input(event) {
        event.type;
        if (event.type === (0, $8a29e9b0d3dc349c$export$bf9b45a2f73f134)) {
            if (event.target !== this) return;
            this.set_position(this.position().add(event.delta));
            event.ctx.repaint();
        }
    }
    can_receive_mouse() {
        return true;
    }
    draw(g) {
        g.ctx.save();
        g.ctx.fillStyle = "#a0a0a0";
        let s = this.size();
        g.ctx.fillRect(0, 0, s.w, 20);
        if (this.sidebar_right) {
            g.ctx.fillRect(0, 0, 20, s.h);
            g.ctx.fillRect(s.w - this.sidebar_width, 0, this.sidebar_width, s.h);
            g.ctx.strokeRect(20, 20, this.size().w - this.sidebar_width - 20, this.size().h - 20 - 20);
        } else {
            g.ctx.fillRect(0, 0, this.sidebar_width, s.h);
            g.ctx.fillRect(s.w - 20, 0, 20, s.h);
            g.ctx.strokeRect(this.sidebar_width, 20, this.size().w - this.sidebar_width - 20, this.size().h - 20 - 20);
        }
        g.ctx.fillRect(0, s.h - 20, s.w, 20);
        g.ctx.strokeStyle = "#444";
        g.ctx.strokeRect(0, 0, this.size().w, this.size().h);
        g.fillStandardText("debug lens", 10, 20, "base");
        let txt = `size: ${this.glass.size().w} x ${this.glass.size().h}`;
        let metrics = g.measureText(txt, "base");
        g.fillStandardText(txt, (this.size().w - metrics.w) / 2, this.size().h, "base");
        g.ctx.restore();
    }
    layout(g, available) {
        this.get_children().forEach((ch)=>{
            ch.layout(g, available);
        });
        let s = this.size();
        if (this.sidebar_right) {
            this.vbox.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(s.w - this.sidebar_width, 20));
            this.glass.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(20, 20));
        } else {
            this.vbox.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(0, 20));
            this.glass.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(this.sidebar_width, 20));
        }
        this.glass.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(s.w - this.sidebar_width - 20, s.h - 20 - 20));
        this.resize_handle.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(s.w - 20, s.h - 20));
        return this.size();
    }
    set_visible(b) {
        this._visible = b;
    }
    set_selected(view) {
        this._selected = view;
        this.fire("select", this._selected);
    }
}
class $e7d69bb808fab13a$export$a3a55c500f36819a extends (0, $7a0175d4f0ca63f6$export$aa949f9e1540fee1) {
    constructor(){
        super("debug-layer");
        this._name = "debug-layer";
        let dl = new $e7d69bb808fab13a$export$f4a8e48567e40fad();
        dl.set_visible(false);
        this.add(dl);
        this.button = new (0, $13755f3aa883028b$export$d2b052e7b4be1756)("D");
        this.button.on((0, $8a29e9b0d3dc349c$export$9e79ac99d4b68a26), ()=>{
            dl.set_visible(!dl.visible());
        });
        this.add(this.button);
    }
    layout(g, available) {
        this.button.layout(g, available);
        super.layout(g, available);
        let s = this.size();
        let b = this.button.size();
        this.button.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(s.w - b.w, s.h - b.h));
        return this.size();
    }
}


var $7745d0f4414a2e9d$exports = {};

$parcel$export($7745d0f4414a2e9d$exports, "TableView", () => $7745d0f4414a2e9d$export$b3c27e869d856b7);


class $7745d0f4414a2e9d$var$TableHeaderView extends (0, $8a29e9b0d3dc349c$export$920f40dd82baec9f) {
    constructor(table){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("table-header-view"));
        this.table = table;
        this._name = "table-header-view";
    }
    draw(g) {
        g.fillBackgroundSize(this.size(), "#f0f0f0");
        // this.log("drawing",this.size())
        let x = 0;
        let y = 20;
        this.table.columns_keys.forEach((key, k)=>{
            let tx = x + 0;
            g.fillRect(tx, 0, 1, 20, "black");
            g.fillStandardText(key, tx + 5, y, "base");
            x += this.table.columns_widths[k];
        });
    }
    layout(g, available) {
        this.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(available.w, 20));
        return this.size();
    }
}
class $7745d0f4414a2e9d$var$TableGridView extends (0, $8a29e9b0d3dc349c$export$920f40dd82baec9f) {
    constructor(table){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("table-grid-view"));
        this._name = "table-grid-view";
        this.table = table;
    }
    draw(g) {
        let h = 20;
        let gw = this.size().w;
        for(let i = 0; i < this.table.data.length; i++){
            let row = this.table.data[i];
            let y = i * h;
            let x = 0;
            this.table.columns_keys.forEach((key, k)=>{
                let col_width = this.table.columns_widths[k];
                let tx = x;
                g.fillRect(tx, y, 1, 20, "black");
                g.fillRect(tx, y, gw, 1, "black");
                let txt = row[key];
                let m = g.measureText(txt, "base");
                if (m.w > col_width) g.fillRect(tx, y, col_width, 20, "red");
                g.fillStandardText(txt, tx + 5, y + 20, "base");
                x += col_width;
            });
        }
    }
    layout(g, available) {
        this.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(available.w, this.table.data.length * 20));
        return this.size();
    }
}
class $7745d0f4414a2e9d$export$b3c27e869d856b7 extends (0, $8a29e9b0d3dc349c$export$13bdd94145ae928f) {
    constructor(songs, columns_keys, columns_widths){
        super((0, $8a29e9b0d3dc349c$export$40fec46f639d6a4d)("table-view"));
        this.data = songs;
        this.columns_keys = columns_keys;
        this.columns_widths = columns_widths;
        this.header = new $7745d0f4414a2e9d$var$TableHeaderView(this);
        this.add(this.header);
        this.scroll = new (0, $7a0175d4f0ca63f6$export$5665e3d6be6adea)();
        this.scroll.set_hflex(true);
        this.scroll.set_vflex(true);
        this.add(this.scroll);
        this.grid = new $7745d0f4414a2e9d$var$TableGridView(this);
        this.scroll.set_content(this.grid);
        this.set_hflex(true);
        this.set_vflex(true);
    }
    draw(g) {
        super.draw(g);
    }
    layout(g, available) {
        // this.log('layout. avail',available)
        if (this.hflex && this.vflex) this.set_size(available);
        else this.set_size(new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(200, 200));
        // layout header
        this.header.layout(g, this.size());
        let s2 = new (0, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec)(this.size().w, this.size().h - 20);
        this.scroll.layout(g, s2);
        this.scroll.set_position(new (0, $8a29e9b0d3dc349c$export$baf26146a414f24a)(0, 20));
        // layout scroll view
        // layout the grid?
        return this.size();
    }
}


console.log("loading thneed");


export {$8a29e9b0d3dc349c$export$aa8e9462579016b1 as CoolEvent, $8a29e9b0d3dc349c$export$9d2b52010bf6ce34 as POINTER_CATEGORY, $8a29e9b0d3dc349c$export$5c736a62aeec4dde as POINTER_MOVE, $8a29e9b0d3dc349c$export$bf9b45a2f73f134 as POINTER_DRAG, $8a29e9b0d3dc349c$export$1b45e8fa340ec4b9 as POINTER_DOWN, $8a29e9b0d3dc349c$export$325fffb5a0fb0686 as POINTER_UP, $8a29e9b0d3dc349c$export$6f2dffa1ce451720 as PRIMARY_BUTTON, $8a29e9b0d3dc349c$export$3ee72973dad68c21 as SECONDARY_BUTTON, $8a29e9b0d3dc349c$export$40fec46f639d6a4d as gen_id, $8a29e9b0d3dc349c$export$2be20915eb18ceef as SuperArray, $8a29e9b0d3dc349c$export$baf26146a414f24a as Point, $8a29e9b0d3dc349c$export$c79fc6492f3af13d as Rect, $8a29e9b0d3dc349c$export$cb6da89c6af1a8ec as Size, $8a29e9b0d3dc349c$export$94806efd9890932f as PointerEvent, $8a29e9b0d3dc349c$export$9ea12e6597684af as KEYBOARD_CATEGORY, $8a29e9b0d3dc349c$export$2f782da1dcec9699 as KEYBOARD_DOWN, $8a29e9b0d3dc349c$export$71f4199cf5d644e1 as KEYBOARD_UP, $8a29e9b0d3dc349c$export$a5c19b564dc41c2c as KeyboardEvent, $8a29e9b0d3dc349c$export$5acce15900d111af as SCROLL_CATEGORY, $8a29e9b0d3dc349c$export$ff567485663629e4 as SCROLL_EVENT, $8a29e9b0d3dc349c$export$6b6e41529b479d4c as ScrollEvent, $8a29e9b0d3dc349c$export$a7f3c29903aaf76d as FOCUS_CATEGORY, $8a29e9b0d3dc349c$export$16f7cbdecbe19b78 as FOCUS_GAINED, $8a29e9b0d3dc349c$export$f82d7d72b9e09307 as FOCUS_LOST, $8a29e9b0d3dc349c$export$ef2db9a302825184 as FocusEvent, $8a29e9b0d3dc349c$export$1b61a664d824d91b as COMMAND_CATEGORY, $8a29e9b0d3dc349c$export$d7d7f0f0e8a54cf8 as COMMAND_ACTION, $8a29e9b0d3dc349c$export$4321e05f6706c18d as CommandEvent, $8a29e9b0d3dc349c$export$9e79ac99d4b68a26 as COMMAND_CHANGE, $8a29e9b0d3dc349c$export$57832389c821635d as CLIPBOARD_CATEGORY, $8a29e9b0d3dc349c$export$af734cf1b8165bed as CLIPBOARD_COPY, $8a29e9b0d3dc349c$export$a43cee0a56e16595 as CLIPBOARD_CUT, $8a29e9b0d3dc349c$export$fdaf284d88231086 as CLIPBOARD_PASTE, $8a29e9b0d3dc349c$export$f7f37dd3b8ffe91f as ClipboardEvent, $8a29e9b0d3dc349c$export$13bdd94145ae928f as BaseParentView, $8a29e9b0d3dc349c$export$920f40dd82baec9f as BaseView, $8a29e9b0d3dc349c$export$9fdee197c47e806f as with_props, $8a29e9b0d3dc349c$export$d4afaa3ba0ec3b47 as with_action, $8a29e9b0d3dc349c$export$48697f005c434be7 as with_change, $c5e8e0cfa8a822f8$export$bef1f36f5486a6a3 as log, $c5e8e0cfa8a822f8$export$e8c1e4de1c401d98 as rect_from_pos_size, $c5e8e0cfa8a822f8$export$b6fe5971b24d23c8 as CanvasSurface, $826b0a205f7d3f10$export$3075603db8e6204c as Sprite, $826b0a205f7d3f10$export$a9bf29f8d87ebbee as Sheet, $826b0a205f7d3f10$export$cfd67673ae2d63ae as Tilemap, $826b0a205f7d3f10$export$dcdc9aec859ae544 as SpriteGlyph, $826b0a205f7d3f10$export$e1896ac0c4970221 as SpriteFont, $826b0a205f7d3f10$export$e64f54f76151192b as load_assets_from_json, $13755f3aa883028b$export$b04be29aa201d4f5 as Label, $13755f3aa883028b$export$6d2887785673b206 as CustomLabel, $13755f3aa883028b$export$cfc7921d29ef7b80 as ActionButton, $13755f3aa883028b$export$62bbe4e48c45d049 as BaseSelectButton, $13755f3aa883028b$export$d2b052e7b4be1756 as ToggleButton, $13755f3aa883028b$export$c767f14fef25f1ed as CheckButton, $13755f3aa883028b$export$f4422ae58352e179 as RadioButton, $13755f3aa883028b$export$c25acd513dcc8062 as IconButton, $13755f3aa883028b$export$ed433d8050015de5 as SelectList, $13755f3aa883028b$export$8b251419efc915eb as Header, $13755f3aa883028b$export$ba8fe6b2d373b3a3 as HSpacer, $13755f3aa883028b$export$f56ea46797033f60 as FontIcon, $13755f3aa883028b$export$181f40ec41159e56 as DropdownButton, $13755f3aa883028b$export$4377c71588c2474b as TextLine, $13755f3aa883028b$export$c925c7a625b1377e as NumberTextLine, $7a0175d4f0ca63f6$export$aa949f9e1540fee1 as LayerView, $7a0175d4f0ca63f6$export$e2a0406e25a673da as HBox, $7a0175d4f0ca63f6$export$c1b74fc959ecff8e as VBox, $7a0175d4f0ca63f6$export$6f2cdf4b4a19686b as GrowPanel, $7a0175d4f0ca63f6$export$5665e3d6be6adea as ScrollView, $7a0175d4f0ca63f6$export$cca08eed9de89ba9 as PopupContainer, $7a0175d4f0ca63f6$export$3f2861baa75f4ff5 as PopupLayer, $7a0175d4f0ca63f6$export$9272eaa8a91f79dc as DialogLayer, $7a0175d4f0ca63f6$export$547754aada6e339f as DialogContainer, $7a0175d4f0ca63f6$export$59fd15e59ca9b1e0 as KeystrokeCaptureView, $8d3684abd246c89e$export$befe6f566a24ebc as randi, $d9cc962363f968ed$export$e22171881e21e37d as ButtonBackgroundColor_active, $d9cc962363f968ed$export$d78081c6bf0643b7 as ButtonBackgroundColor_selected, $d9cc962363f968ed$export$4b96206d0506e47f as ButtonBackgroundColor, $d9cc962363f968ed$export$addd948fb18d2d08 as ButtonBorderColor, $d9cc962363f968ed$export$165f1f1fad5fbec5 as StandardSelectionColor, $d9cc962363f968ed$export$9b5aefa8b8f9f54 as StandardTextColor, $d9cc962363f968ed$export$9f53be77959c9e4 as StandardTextStyle, $d9cc962363f968ed$export$63eec52eb5416473 as StandardTextHeight, $d9cc962363f968ed$export$58b2cdab93a993 as StandardVerticalMargin, $d9cc962363f968ed$export$bc1d2e14213c9578 as StandardLeftPadding, $d9cc962363f968ed$export$6b1a51bbd32ad362 as StandardPanelBackgroundColor, $e7d69bb808fab13a$export$24804c1f95a85d60 as DebugLensGlass, $e7d69bb808fab13a$export$33f2411a0ad35be7 as ResizeHandle, $e7d69bb808fab13a$export$f4a8e48567e40fad as DebugLens, $e7d69bb808fab13a$export$a3a55c500f36819a as DebugLayer, $7745d0f4414a2e9d$export$b3c27e869d856b7 as TableView};
//# sourceMappingURL=module.js.map
